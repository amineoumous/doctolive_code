{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:\\\\app\\\\doctolive_code\\\\pro-doctolive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:\\\\app\\\\doctolive_code\\\\pro-doctolive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\app\\\\doctolive_code\\\\pro-doctolive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _get = require(\"C:\\\\app\\\\doctolive_code\\\\pro-doctolive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\app\\\\doctolive_code\\\\pro-doctolive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\app\\\\doctolive_code\\\\pro-doctolive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\app\\\\doctolive_code\\\\pro-doctolive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = void 0;\n\nvar socket_io_parser_1 = require(\"socket.io-parser\");\n\nvar Emitter = require(\"component-emitter\");\n\nvar on_1 = require(\"./on\");\n\nvar debug = require(\"debug\")(\"socket.io-client:socket\");\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\n\n\nvar RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\n\nvar Socket = /*#__PURE__*/function (_Emitter) {\n  _inherits(Socket, _Emitter);\n\n  var _super = _createSuper(Socket);\n\n  /**\r\n   * `Socket` constructor.\r\n   *\r\n   * @public\r\n   */\n  function Socket(io, nsp, opts) {\n    var _this;\n\n    _classCallCheck(this, Socket);\n\n    _this = _super.call(this);\n    _this.receiveBuffer = [];\n    _this.sendBuffer = [];\n    _this.ids = 0;\n    _this.acks = {};\n    _this.flags = {};\n    _this.io = io;\n    _this.nsp = nsp;\n    _this.ids = 0;\n    _this.acks = {};\n    _this.receiveBuffer = [];\n    _this.sendBuffer = [];\n    _this.connected = false;\n    _this.disconnected = true;\n    _this.flags = {};\n\n    if (opts && opts.auth) {\n      _this.auth = opts.auth;\n    }\n\n    if (_this.io._autoConnect) _this.open();\n    return _this;\n  }\n  /**\r\n   * Subscribe to open, close and packet events\r\n   *\r\n   * @private\r\n   */\n\n\n  _createClass(Socket, [{\n    key: \"subEvents\",\n    value: function subEvents() {\n      if (this.subs) return;\n      var io = this.io;\n      this.subs = [on_1.on(io, \"open\", this.onopen.bind(this)), on_1.on(io, \"packet\", this.onpacket.bind(this)), on_1.on(io, \"error\", this.onerror.bind(this)), on_1.on(io, \"close\", this.onclose.bind(this))];\n    }\n    /**\r\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\r\n     */\n\n  }, {\n    key: \"active\",\n    get: function get() {\n      return !!this.subs;\n    }\n    /**\r\n     * \"Opens\" the socket.\r\n     *\r\n     * @public\r\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\r\n     * Alias for connect()\r\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      return this.connect();\n    }\n    /**\r\n     * Sends a `message` event.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\r\n     * Override `emit`.\r\n     * If the event is in `events`, it's emitted normally.\r\n     *\r\n     * @param ev - event name\r\n     * @return self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev + '\" is a reserved event name');\n      }\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      args.unshift(ev);\n      var packet = {\n        type: socket_io_parser_1.PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false; // event ack callback\n\n      if (\"function\" === typeof args[args.length - 1]) {\n        debug(\"emitting packet with ack id %d\", this.ids);\n        this.acks[this.ids] = args.pop();\n        packet.id = this.ids++;\n      }\n\n      var isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n      var discardPacket = this.flags[\"volatile\"] && (!isTransportWritable || !this.connected);\n\n      if (discardPacket) {\n        debug(\"discard packet as the transport is not currently writable\");\n      } else if (this.connected) {\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n\n      this.flags = {};\n      return this;\n    }\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\n\n  }, {\n    key: \"packet\",\n    value: function packet(_packet) {\n      _packet.nsp = this.nsp;\n\n      this.io._packet(_packet);\n    }\n    /**\r\n     * Called upon engine `open`.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      var _this2 = this;\n\n      debug(\"transport is open - connecting\");\n\n      if (typeof this.auth == \"function\") {\n        this.auth(function (data) {\n          _this2.packet({\n            type: socket_io_parser_1.PacketType.CONNECT,\n            data: data\n          });\n        });\n      } else {\n        this.packet({\n          type: socket_io_parser_1.PacketType.CONNECT,\n          data: this.auth\n        });\n      }\n    }\n    /**\r\n     * Called upon engine or manager `error`.\r\n     *\r\n     * @param err\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      if (!this.connected) {\n        _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"connect_error\", err);\n      }\n    }\n    /**\r\n     * Called upon engine `close`.\r\n     *\r\n     * @param reason\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason) {\n      debug(\"close (%s)\", reason);\n      this.connected = false;\n      this.disconnected = true;\n      delete this.id;\n\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"disconnect\", reason);\n    }\n    /**\r\n     * Called with socket packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onpacket\",\n    value: function onpacket(packet) {\n      var sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n\n      switch (packet.type) {\n        case socket_io_parser_1.PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            var id = packet.data.sid;\n            this.onconnect(id);\n          } else {\n            _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n\n          break;\n\n        case socket_io_parser_1.PacketType.EVENT:\n          this.onevent(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.ACK:\n          this.onack(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n\n        case socket_io_parser_1.PacketType.CONNECT_ERROR:\n          var err = new Error(packet.data.message); // @ts-ignore\n\n          err.data = packet.data.data;\n\n          _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"connect_error\", err);\n\n          break;\n      }\n    }\n    /**\r\n     * Called upon a server event.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onevent\",\n    value: function onevent(packet) {\n      var args = packet.data || [];\n      debug(\"emitting event %j\", args);\n\n      if (null != packet.id) {\n        debug(\"attaching ack callback to event\");\n        args.push(this.ack(packet.id));\n      }\n\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        var listeners = this._anyListeners.slice();\n\n        var _iterator = _createForOfIteratorHelper(listeners),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener.apply(this, args);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).apply(this, args);\n    }\n    /**\r\n     * Produces an ack callback to emit with an event.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"ack\",\n    value: function ack(id) {\n      var self = this;\n      var sent = false;\n      return function () {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        debug(\"sending ack %j\", args);\n        self.packet({\n          type: socket_io_parser_1.PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\r\n     * Called upon a server acknowlegement.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onack\",\n    value: function onack(packet) {\n      var ack = this.acks[packet.id];\n\n      if (\"function\" === typeof ack) {\n        debug(\"calling ack %s with %j\", packet.id, packet.data);\n        ack.apply(this, packet.data);\n        delete this.acks[packet.id];\n      } else {\n        debug(\"bad ack %s\", packet.id);\n      }\n    }\n    /**\r\n     * Called upon server connect.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onconnect\",\n    value: function onconnect(id) {\n      debug(\"socket connected with id %s\", id);\n      this.id = id;\n      this.connected = true;\n      this.disconnected = false;\n\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"connect\");\n\n      this.emitBuffered();\n    }\n    /**\r\n     * Emit buffered events (received and emitted).\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"emitBuffered\",\n    value: function emitBuffered() {\n      var _this3 = this;\n\n      this.receiveBuffer.forEach(function (args) {\n        return _this3.emitEvent(args);\n      });\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(function (packet) {\n        return _this3.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\r\n     * Called upon server disconnect.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"ondisconnect\",\n    value: function ondisconnect() {\n      debug(\"server disconnect (%s)\", this.nsp);\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\r\n     * Called upon forced client/server side disconnections,\r\n     * this method ensures the manager stops tracking us and\r\n     * that reconnections don't get triggered for this.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        this.subs.forEach(function (subDestroy) {\n          return subDestroy();\n        });\n        this.subs = undefined;\n      }\n\n      this.io[\"_destroy\"](this);\n    }\n    /**\r\n     * Disconnects the socket manually.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.connected) {\n        debug(\"performing disconnect (%s)\", this.nsp);\n        this.packet({\n          type: socket_io_parser_1.PacketType.DISCONNECT\n        });\n      } // remove socket from pool\n\n\n      this.destroy();\n\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n\n      return this;\n    }\n    /**\r\n     * Alias for disconnect()\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.disconnect();\n    }\n    /**\r\n     * Sets the compress flag.\r\n     *\r\n     * @param compress - if `true`, compresses the sending data\r\n     * @return self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      this.flags.compress = _compress;\n      return this;\n    }\n    /**\r\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n     * ready to send messages.\r\n     *\r\n     * @returns self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      this.flags[\"volatile\"] = true;\n      return this;\n    }\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\n\n  }, {\n    key: \"onAny\",\n    value: function onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.push(listener);\n\n      return this;\n    }\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\n\n  }, {\n    key: \"prependAny\",\n    value: function prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.unshift(listener);\n\n      return this;\n    }\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\n\n  }, {\n    key: \"offAny\",\n    value: function offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n\n      if (listener) {\n        var listeners = this._anyListeners;\n\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n\n      return this;\n    }\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     *\r\n     * @public\r\n     */\n\n  }, {\n    key: \"listenersAny\",\n    value: function listenersAny() {\n      return this._anyListeners || [];\n    }\n  }]);\n\n  return Socket;\n}(Emitter);\n\nexports.Socket = Socket;","map":{"version":3,"names":["Object","defineProperty","exports","value","Socket","socket_io_parser_1","require","Emitter","on_1","debug","RESERVED_EVENTS","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","io","nsp","opts","receiveBuffer","sendBuffer","ids","acks","flags","connected","disconnected","auth","_autoConnect","open","subs","on","onopen","bind","onpacket","onerror","onclose","subEvents","_readyState","args","unshift","emit","apply","ev","hasOwnProperty","Error","packet","type","PacketType","EVENT","data","options","compress","length","pop","id","isTransportWritable","engine","transport","writable","discardPacket","push","_packet","CONNECT","err","reason","sameNamespace","sid","onconnect","onevent","BINARY_EVENT","ACK","onack","BINARY_ACK","DISCONNECT","ondisconnect","CONNECT_ERROR","message","ack","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","destroy","subDestroy","undefined","i","splice"],"sources":["C:/app/doctolive_code/pro-doctolive/node_modules/socket.io-client/build/socket.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Socket = void 0;\r\nconst socket_io_parser_1 = require(\"socket.io-parser\");\r\nconst Emitter = require(\"component-emitter\");\r\nconst on_1 = require(\"./on\");\r\nconst debug = require(\"debug\")(\"socket.io-client:socket\");\r\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\r\nconst RESERVED_EVENTS = Object.freeze({\r\n    connect: 1,\r\n    connect_error: 1,\r\n    disconnect: 1,\r\n    disconnecting: 1,\r\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\r\n    newListener: 1,\r\n    removeListener: 1,\r\n});\r\nclass Socket extends Emitter {\r\n    /**\r\n     * `Socket` constructor.\r\n     *\r\n     * @public\r\n     */\r\n    constructor(io, nsp, opts) {\r\n        super();\r\n        this.receiveBuffer = [];\r\n        this.sendBuffer = [];\r\n        this.ids = 0;\r\n        this.acks = {};\r\n        this.flags = {};\r\n        this.io = io;\r\n        this.nsp = nsp;\r\n        this.ids = 0;\r\n        this.acks = {};\r\n        this.receiveBuffer = [];\r\n        this.sendBuffer = [];\r\n        this.connected = false;\r\n        this.disconnected = true;\r\n        this.flags = {};\r\n        if (opts && opts.auth) {\r\n            this.auth = opts.auth;\r\n        }\r\n        if (this.io._autoConnect)\r\n            this.open();\r\n    }\r\n    /**\r\n     * Subscribe to open, close and packet events\r\n     *\r\n     * @private\r\n     */\r\n    subEvents() {\r\n        if (this.subs)\r\n            return;\r\n        const io = this.io;\r\n        this.subs = [\r\n            on_1.on(io, \"open\", this.onopen.bind(this)),\r\n            on_1.on(io, \"packet\", this.onpacket.bind(this)),\r\n            on_1.on(io, \"error\", this.onerror.bind(this)),\r\n            on_1.on(io, \"close\", this.onclose.bind(this)),\r\n        ];\r\n    }\r\n    /**\r\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\r\n     */\r\n    get active() {\r\n        return !!this.subs;\r\n    }\r\n    /**\r\n     * \"Opens\" the socket.\r\n     *\r\n     * @public\r\n     */\r\n    connect() {\r\n        if (this.connected)\r\n            return this;\r\n        this.subEvents();\r\n        if (!this.io[\"_reconnecting\"])\r\n            this.io.open(); // ensure open\r\n        if (\"open\" === this.io._readyState)\r\n            this.onopen();\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for connect()\r\n     */\r\n    open() {\r\n        return this.connect();\r\n    }\r\n    /**\r\n     * Sends a `message` event.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    send(...args) {\r\n        args.unshift(\"message\");\r\n        this.emit.apply(this, args);\r\n        return this;\r\n    }\r\n    /**\r\n     * Override `emit`.\r\n     * If the event is in `events`, it's emitted normally.\r\n     *\r\n     * @param ev - event name\r\n     * @return self\r\n     * @public\r\n     */\r\n    emit(ev, ...args) {\r\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\r\n            throw new Error('\"' + ev + '\" is a reserved event name');\r\n        }\r\n        args.unshift(ev);\r\n        const packet = {\r\n            type: socket_io_parser_1.PacketType.EVENT,\r\n            data: args,\r\n        };\r\n        packet.options = {};\r\n        packet.options.compress = this.flags.compress !== false;\r\n        // event ack callback\r\n        if (\"function\" === typeof args[args.length - 1]) {\r\n            debug(\"emitting packet with ack id %d\", this.ids);\r\n            this.acks[this.ids] = args.pop();\r\n            packet.id = this.ids++;\r\n        }\r\n        const isTransportWritable = this.io.engine &&\r\n            this.io.engine.transport &&\r\n            this.io.engine.transport.writable;\r\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\r\n        if (discardPacket) {\r\n            debug(\"discard packet as the transport is not currently writable\");\r\n        }\r\n        else if (this.connected) {\r\n            this.packet(packet);\r\n        }\r\n        else {\r\n            this.sendBuffer.push(packet);\r\n        }\r\n        this.flags = {};\r\n        return this;\r\n    }\r\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    packet(packet) {\r\n        packet.nsp = this.nsp;\r\n        this.io._packet(packet);\r\n    }\r\n    /**\r\n     * Called upon engine `open`.\r\n     *\r\n     * @private\r\n     */\r\n    onopen() {\r\n        debug(\"transport is open - connecting\");\r\n        if (typeof this.auth == \"function\") {\r\n            this.auth((data) => {\r\n                this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data });\r\n            });\r\n        }\r\n        else {\r\n            this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data: this.auth });\r\n        }\r\n    }\r\n    /**\r\n     * Called upon engine or manager `error`.\r\n     *\r\n     * @param err\r\n     * @private\r\n     */\r\n    onerror(err) {\r\n        if (!this.connected) {\r\n            super.emit(\"connect_error\", err);\r\n        }\r\n    }\r\n    /**\r\n     * Called upon engine `close`.\r\n     *\r\n     * @param reason\r\n     * @private\r\n     */\r\n    onclose(reason) {\r\n        debug(\"close (%s)\", reason);\r\n        this.connected = false;\r\n        this.disconnected = true;\r\n        delete this.id;\r\n        super.emit(\"disconnect\", reason);\r\n    }\r\n    /**\r\n     * Called with socket packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onpacket(packet) {\r\n        const sameNamespace = packet.nsp === this.nsp;\r\n        if (!sameNamespace)\r\n            return;\r\n        switch (packet.type) {\r\n            case socket_io_parser_1.PacketType.CONNECT:\r\n                if (packet.data && packet.data.sid) {\r\n                    const id = packet.data.sid;\r\n                    this.onconnect(id);\r\n                }\r\n                else {\r\n                    super.emit(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\r\n                }\r\n                break;\r\n            case socket_io_parser_1.PacketType.EVENT:\r\n                this.onevent(packet);\r\n                break;\r\n            case socket_io_parser_1.PacketType.BINARY_EVENT:\r\n                this.onevent(packet);\r\n                break;\r\n            case socket_io_parser_1.PacketType.ACK:\r\n                this.onack(packet);\r\n                break;\r\n            case socket_io_parser_1.PacketType.BINARY_ACK:\r\n                this.onack(packet);\r\n                break;\r\n            case socket_io_parser_1.PacketType.DISCONNECT:\r\n                this.ondisconnect();\r\n                break;\r\n            case socket_io_parser_1.PacketType.CONNECT_ERROR:\r\n                const err = new Error(packet.data.message);\r\n                // @ts-ignore\r\n                err.data = packet.data.data;\r\n                super.emit(\"connect_error\", err);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Called upon a server event.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onevent(packet) {\r\n        const args = packet.data || [];\r\n        debug(\"emitting event %j\", args);\r\n        if (null != packet.id) {\r\n            debug(\"attaching ack callback to event\");\r\n            args.push(this.ack(packet.id));\r\n        }\r\n        if (this.connected) {\r\n            this.emitEvent(args);\r\n        }\r\n        else {\r\n            this.receiveBuffer.push(Object.freeze(args));\r\n        }\r\n    }\r\n    emitEvent(args) {\r\n        if (this._anyListeners && this._anyListeners.length) {\r\n            const listeners = this._anyListeners.slice();\r\n            for (const listener of listeners) {\r\n                listener.apply(this, args);\r\n            }\r\n        }\r\n        super.emit.apply(this, args);\r\n    }\r\n    /**\r\n     * Produces an ack callback to emit with an event.\r\n     *\r\n     * @private\r\n     */\r\n    ack(id) {\r\n        const self = this;\r\n        let sent = false;\r\n        return function (...args) {\r\n            // prevent double callbacks\r\n            if (sent)\r\n                return;\r\n            sent = true;\r\n            debug(\"sending ack %j\", args);\r\n            self.packet({\r\n                type: socket_io_parser_1.PacketType.ACK,\r\n                id: id,\r\n                data: args,\r\n            });\r\n        };\r\n    }\r\n    /**\r\n     * Called upon a server acknowlegement.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onack(packet) {\r\n        const ack = this.acks[packet.id];\r\n        if (\"function\" === typeof ack) {\r\n            debug(\"calling ack %s with %j\", packet.id, packet.data);\r\n            ack.apply(this, packet.data);\r\n            delete this.acks[packet.id];\r\n        }\r\n        else {\r\n            debug(\"bad ack %s\", packet.id);\r\n        }\r\n    }\r\n    /**\r\n     * Called upon server connect.\r\n     *\r\n     * @private\r\n     */\r\n    onconnect(id) {\r\n        debug(\"socket connected with id %s\", id);\r\n        this.id = id;\r\n        this.connected = true;\r\n        this.disconnected = false;\r\n        super.emit(\"connect\");\r\n        this.emitBuffered();\r\n    }\r\n    /**\r\n     * Emit buffered events (received and emitted).\r\n     *\r\n     * @private\r\n     */\r\n    emitBuffered() {\r\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\r\n        this.receiveBuffer = [];\r\n        this.sendBuffer.forEach((packet) => this.packet(packet));\r\n        this.sendBuffer = [];\r\n    }\r\n    /**\r\n     * Called upon server disconnect.\r\n     *\r\n     * @private\r\n     */\r\n    ondisconnect() {\r\n        debug(\"server disconnect (%s)\", this.nsp);\r\n        this.destroy();\r\n        this.onclose(\"io server disconnect\");\r\n    }\r\n    /**\r\n     * Called upon forced client/server side disconnections,\r\n     * this method ensures the manager stops tracking us and\r\n     * that reconnections don't get triggered for this.\r\n     *\r\n     * @private\r\n     */\r\n    destroy() {\r\n        if (this.subs) {\r\n            // clean subscriptions to avoid reconnections\r\n            this.subs.forEach((subDestroy) => subDestroy());\r\n            this.subs = undefined;\r\n        }\r\n        this.io[\"_destroy\"](this);\r\n    }\r\n    /**\r\n     * Disconnects the socket manually.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    disconnect() {\r\n        if (this.connected) {\r\n            debug(\"performing disconnect (%s)\", this.nsp);\r\n            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });\r\n        }\r\n        // remove socket from pool\r\n        this.destroy();\r\n        if (this.connected) {\r\n            // fire events\r\n            this.onclose(\"io client disconnect\");\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for disconnect()\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    close() {\r\n        return this.disconnect();\r\n    }\r\n    /**\r\n     * Sets the compress flag.\r\n     *\r\n     * @param compress - if `true`, compresses the sending data\r\n     * @return self\r\n     * @public\r\n     */\r\n    compress(compress) {\r\n        this.flags.compress = compress;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n     * ready to send messages.\r\n     *\r\n     * @returns self\r\n     * @public\r\n     */\r\n    get volatile() {\r\n        this.flags.volatile = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    onAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.push(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    prependAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.unshift(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    offAny(listener) {\r\n        if (!this._anyListeners) {\r\n            return this;\r\n        }\r\n        if (listener) {\r\n            const listeners = this._anyListeners;\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                if (listener === listeners[i]) {\r\n                    listeners.splice(i, 1);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._anyListeners = [];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     *\r\n     * @public\r\n     */\r\n    listenersAny() {\r\n        return this._anyListeners || [];\r\n    }\r\n}\r\nexports.Socket = Socket;\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiB,KAAK,CAAtB;;AACA,IAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,mBAAD,CAAvB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAAP,CAAiB,yBAAjB,CAAd;AACA;AACA;AACA;AACA;;;AACA,IAAMI,eAAe,GAAGV,MAAM,CAACW,MAAP,CAAc;EAClCC,OAAO,EAAE,CADyB;EAElCC,aAAa,EAAE,CAFmB;EAGlCC,UAAU,EAAE,CAHsB;EAIlCC,aAAa,EAAE,CAJmB;EAKlC;EACAC,WAAW,EAAE,CANqB;EAOlCC,cAAc,EAAE;AAPkB,CAAd,CAAxB;;IASMb,M;;;;;EACF;AACJ;AACA;AACA;AACA;EACI,gBAAYc,EAAZ,EAAgBC,GAAhB,EAAqBC,IAArB,EAA2B;IAAA;;IAAA;;IACvB;IACA,MAAKC,aAAL,GAAqB,EAArB;IACA,MAAKC,UAAL,GAAkB,EAAlB;IACA,MAAKC,GAAL,GAAW,CAAX;IACA,MAAKC,IAAL,GAAY,EAAZ;IACA,MAAKC,KAAL,GAAa,EAAb;IACA,MAAKP,EAAL,GAAUA,EAAV;IACA,MAAKC,GAAL,GAAWA,GAAX;IACA,MAAKI,GAAL,GAAW,CAAX;IACA,MAAKC,IAAL,GAAY,EAAZ;IACA,MAAKH,aAAL,GAAqB,EAArB;IACA,MAAKC,UAAL,GAAkB,EAAlB;IACA,MAAKI,SAAL,GAAiB,KAAjB;IACA,MAAKC,YAAL,GAAoB,IAApB;IACA,MAAKF,KAAL,GAAa,EAAb;;IACA,IAAIL,IAAI,IAAIA,IAAI,CAACQ,IAAjB,EAAuB;MACnB,MAAKA,IAAL,GAAYR,IAAI,CAACQ,IAAjB;IACH;;IACD,IAAI,MAAKV,EAAL,CAAQW,YAAZ,EACI,MAAKC,IAAL;IApBmB;EAqB1B;EACD;AACJ;AACA;AACA;AACA;;;;;WACI,qBAAY;MACR,IAAI,KAAKC,IAAT,EACI;MACJ,IAAMb,EAAE,GAAG,KAAKA,EAAhB;MACA,KAAKa,IAAL,GAAY,CACRvB,IAAI,CAACwB,EAAL,CAAQd,EAAR,EAAY,MAAZ,EAAoB,KAAKe,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAApB,CADQ,EAER1B,IAAI,CAACwB,EAAL,CAAQd,EAAR,EAAY,QAAZ,EAAsB,KAAKiB,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAtB,CAFQ,EAGR1B,IAAI,CAACwB,EAAL,CAAQd,EAAR,EAAY,OAAZ,EAAqB,KAAKkB,OAAL,CAAaF,IAAb,CAAkB,IAAlB,CAArB,CAHQ,EAIR1B,IAAI,CAACwB,EAAL,CAAQd,EAAR,EAAY,OAAZ,EAAqB,KAAKmB,OAAL,CAAaH,IAAb,CAAkB,IAAlB,CAArB,CAJQ,CAAZ;IAMH;IACD;AACJ;AACA;;;;SACI,eAAa;MACT,OAAO,CAAC,CAAC,KAAKH,IAAd;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,mBAAU;MACN,IAAI,KAAKL,SAAT,EACI,OAAO,IAAP;MACJ,KAAKY,SAAL;MACA,IAAI,CAAC,KAAKpB,EAAL,CAAQ,eAAR,CAAL,EACI,KAAKA,EAAL,CAAQY,IAAR,GALE,CAKc;;MACpB,IAAI,WAAW,KAAKZ,EAAL,CAAQqB,WAAvB,EACI,KAAKN,MAAL;MACJ,OAAO,IAAP;IACH;IACD;AACJ;AACA;;;;WACI,gBAAO;MACH,OAAO,KAAKrB,OAAL,EAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,gBAAc;MAAA,kCAAN4B,IAAM;QAANA,IAAM;MAAA;;MACVA,IAAI,CAACC,OAAL,CAAa,SAAb;MACA,KAAKC,IAAL,CAAUC,KAAV,CAAgB,IAAhB,EAAsBH,IAAtB;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,cAAKI,EAAL,EAAkB;MACd,IAAIlC,eAAe,CAACmC,cAAhB,CAA+BD,EAA/B,CAAJ,EAAwC;QACpC,MAAM,IAAIE,KAAJ,CAAU,MAAMF,EAAN,GAAW,4BAArB,CAAN;MACH;;MAHa,mCAANJ,IAAM;QAANA,IAAM;MAAA;;MAIdA,IAAI,CAACC,OAAL,CAAaG,EAAb;MACA,IAAMG,MAAM,GAAG;QACXC,IAAI,EAAE3C,kBAAkB,CAAC4C,UAAnB,CAA8BC,KADzB;QAEXC,IAAI,EAAEX;MAFK,CAAf;MAIAO,MAAM,CAACK,OAAP,GAAiB,EAAjB;MACAL,MAAM,CAACK,OAAP,CAAeC,QAAf,GAA0B,KAAK5B,KAAL,CAAW4B,QAAX,KAAwB,KAAlD,CAVc,CAWd;;MACA,IAAI,eAAe,OAAOb,IAAI,CAACA,IAAI,CAACc,MAAL,GAAc,CAAf,CAA9B,EAAiD;QAC7C7C,KAAK,CAAC,gCAAD,EAAmC,KAAKc,GAAxC,CAAL;QACA,KAAKC,IAAL,CAAU,KAAKD,GAAf,IAAsBiB,IAAI,CAACe,GAAL,EAAtB;QACAR,MAAM,CAACS,EAAP,GAAY,KAAKjC,GAAL,EAAZ;MACH;;MACD,IAAMkC,mBAAmB,GAAG,KAAKvC,EAAL,CAAQwC,MAAR,IACxB,KAAKxC,EAAL,CAAQwC,MAAR,CAAeC,SADS,IAExB,KAAKzC,EAAL,CAAQwC,MAAR,CAAeC,SAAf,CAAyBC,QAF7B;MAGA,IAAMC,aAAa,GAAG,KAAKpC,KAAL,iBAAwB,CAACgC,mBAAD,IAAwB,CAAC,KAAK/B,SAAtD,CAAtB;;MACA,IAAImC,aAAJ,EAAmB;QACfpD,KAAK,CAAC,2DAAD,CAAL;MACH,CAFD,MAGK,IAAI,KAAKiB,SAAT,EAAoB;QACrB,KAAKqB,MAAL,CAAYA,MAAZ;MACH,CAFI,MAGA;QACD,KAAKzB,UAAL,CAAgBwC,IAAhB,CAAqBf,MAArB;MACH;;MACD,KAAKtB,KAAL,GAAa,EAAb;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,gBAAOsB,OAAP,EAAe;MACXA,OAAM,CAAC5B,GAAP,GAAa,KAAKA,GAAlB;;MACA,KAAKD,EAAL,CAAQ6C,OAAR,CAAgBhB,OAAhB;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,kBAAS;MAAA;;MACLtC,KAAK,CAAC,gCAAD,CAAL;;MACA,IAAI,OAAO,KAAKmB,IAAZ,IAAoB,UAAxB,EAAoC;QAChC,KAAKA,IAAL,CAAU,UAACuB,IAAD,EAAU;UAChB,MAAI,CAACJ,MAAL,CAAY;YAAEC,IAAI,EAAE3C,kBAAkB,CAAC4C,UAAnB,CAA8Be,OAAtC;YAA+Cb,IAAI,EAAJA;UAA/C,CAAZ;QACH,CAFD;MAGH,CAJD,MAKK;QACD,KAAKJ,MAAL,CAAY;UAAEC,IAAI,EAAE3C,kBAAkB,CAAC4C,UAAnB,CAA8Be,OAAtC;UAA+Cb,IAAI,EAAE,KAAKvB;QAA1D,CAAZ;MACH;IACJ;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,iBAAQqC,GAAR,EAAa;MACT,IAAI,CAAC,KAAKvC,SAAV,EAAqB;QACjB,iEAAW,eAAX,EAA4BuC,GAA5B;MACH;IACJ;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,iBAAQC,MAAR,EAAgB;MACZzD,KAAK,CAAC,YAAD,EAAeyD,MAAf,CAAL;MACA,KAAKxC,SAAL,GAAiB,KAAjB;MACA,KAAKC,YAAL,GAAoB,IAApB;MACA,OAAO,KAAK6B,EAAZ;;MACA,iEAAW,YAAX,EAAyBU,MAAzB;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,kBAASnB,MAAT,EAAiB;MACb,IAAMoB,aAAa,GAAGpB,MAAM,CAAC5B,GAAP,KAAe,KAAKA,GAA1C;MACA,IAAI,CAACgD,aAAL,EACI;;MACJ,QAAQpB,MAAM,CAACC,IAAf;QACI,KAAK3C,kBAAkB,CAAC4C,UAAnB,CAA8Be,OAAnC;UACI,IAAIjB,MAAM,CAACI,IAAP,IAAeJ,MAAM,CAACI,IAAP,CAAYiB,GAA/B,EAAoC;YAChC,IAAMZ,EAAE,GAAGT,MAAM,CAACI,IAAP,CAAYiB,GAAvB;YACA,KAAKC,SAAL,CAAeb,EAAf;UACH,CAHD,MAIK;YACD,iEAAW,eAAX,EAA4B,IAAIV,KAAJ,CAAU,2LAAV,CAA5B;UACH;;UACD;;QACJ,KAAKzC,kBAAkB,CAAC4C,UAAnB,CAA8BC,KAAnC;UACI,KAAKoB,OAAL,CAAavB,MAAb;UACA;;QACJ,KAAK1C,kBAAkB,CAAC4C,UAAnB,CAA8BsB,YAAnC;UACI,KAAKD,OAAL,CAAavB,MAAb;UACA;;QACJ,KAAK1C,kBAAkB,CAAC4C,UAAnB,CAA8BuB,GAAnC;UACI,KAAKC,KAAL,CAAW1B,MAAX;UACA;;QACJ,KAAK1C,kBAAkB,CAAC4C,UAAnB,CAA8ByB,UAAnC;UACI,KAAKD,KAAL,CAAW1B,MAAX;UACA;;QACJ,KAAK1C,kBAAkB,CAAC4C,UAAnB,CAA8B0B,UAAnC;UACI,KAAKC,YAAL;UACA;;QACJ,KAAKvE,kBAAkB,CAAC4C,UAAnB,CAA8B4B,aAAnC;UACI,IAAMZ,GAAG,GAAG,IAAInB,KAAJ,CAAUC,MAAM,CAACI,IAAP,CAAY2B,OAAtB,CAAZ,CADJ,CAEI;;UACAb,GAAG,CAACd,IAAJ,GAAWJ,MAAM,CAACI,IAAP,CAAYA,IAAvB;;UACA,iEAAW,eAAX,EAA4Bc,GAA5B;;UACA;MA9BR;IAgCH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,iBAAQlB,MAAR,EAAgB;MACZ,IAAMP,IAAI,GAAGO,MAAM,CAACI,IAAP,IAAe,EAA5B;MACA1C,KAAK,CAAC,mBAAD,EAAsB+B,IAAtB,CAAL;;MACA,IAAI,QAAQO,MAAM,CAACS,EAAnB,EAAuB;QACnB/C,KAAK,CAAC,iCAAD,CAAL;QACA+B,IAAI,CAACsB,IAAL,CAAU,KAAKiB,GAAL,CAAShC,MAAM,CAACS,EAAhB,CAAV;MACH;;MACD,IAAI,KAAK9B,SAAT,EAAoB;QAChB,KAAKsD,SAAL,CAAexC,IAAf;MACH,CAFD,MAGK;QACD,KAAKnB,aAAL,CAAmByC,IAAnB,CAAwB9D,MAAM,CAACW,MAAP,CAAc6B,IAAd,CAAxB;MACH;IACJ;;;WACD,mBAAUA,IAAV,EAAgB;MACZ,IAAI,KAAKyC,aAAL,IAAsB,KAAKA,aAAL,CAAmB3B,MAA7C,EAAqD;QACjD,IAAM4B,SAAS,GAAG,KAAKD,aAAL,CAAmBE,KAAnB,EAAlB;;QADiD,2CAE1BD,SAF0B;QAAA;;QAAA;UAEjD,oDAAkC;YAAA,IAAvBE,QAAuB;YAC9BA,QAAQ,CAACzC,KAAT,CAAe,IAAf,EAAqBH,IAArB;UACH;QAJgD;UAAA;QAAA;UAAA;QAAA;MAKpD;;MACD,sDAAWG,KAAX,CAAiB,IAAjB,EAAuBH,IAAvB;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,aAAIgB,EAAJ,EAAQ;MACJ,IAAM6B,IAAI,GAAG,IAAb;MACA,IAAIC,IAAI,GAAG,KAAX;MACA,OAAO,YAAmB;QACtB;QACA,IAAIA,IAAJ,EACI;QACJA,IAAI,GAAG,IAAP;;QAJsB,mCAAN9C,IAAM;UAANA,IAAM;QAAA;;QAKtB/B,KAAK,CAAC,gBAAD,EAAmB+B,IAAnB,CAAL;QACA6C,IAAI,CAACtC,MAAL,CAAY;UACRC,IAAI,EAAE3C,kBAAkB,CAAC4C,UAAnB,CAA8BuB,GAD5B;UAERhB,EAAE,EAAEA,EAFI;UAGRL,IAAI,EAAEX;QAHE,CAAZ;MAKH,CAXD;IAYH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,eAAMO,MAAN,EAAc;MACV,IAAMgC,GAAG,GAAG,KAAKvD,IAAL,CAAUuB,MAAM,CAACS,EAAjB,CAAZ;;MACA,IAAI,eAAe,OAAOuB,GAA1B,EAA+B;QAC3BtE,KAAK,CAAC,wBAAD,EAA2BsC,MAAM,CAACS,EAAlC,EAAsCT,MAAM,CAACI,IAA7C,CAAL;QACA4B,GAAG,CAACpC,KAAJ,CAAU,IAAV,EAAgBI,MAAM,CAACI,IAAvB;QACA,OAAO,KAAK3B,IAAL,CAAUuB,MAAM,CAACS,EAAjB,CAAP;MACH,CAJD,MAKK;QACD/C,KAAK,CAAC,YAAD,EAAesC,MAAM,CAACS,EAAtB,CAAL;MACH;IACJ;IACD;AACJ;AACA;AACA;AACA;;;;WACI,mBAAUA,EAAV,EAAc;MACV/C,KAAK,CAAC,6BAAD,EAAgC+C,EAAhC,CAAL;MACA,KAAKA,EAAL,GAAUA,EAAV;MACA,KAAK9B,SAAL,GAAiB,IAAjB;MACA,KAAKC,YAAL,GAAoB,KAApB;;MACA,iEAAW,SAAX;;MACA,KAAK4D,YAAL;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,wBAAe;MAAA;;MACX,KAAKlE,aAAL,CAAmBmE,OAAnB,CAA2B,UAAChD,IAAD;QAAA,OAAU,MAAI,CAACwC,SAAL,CAAexC,IAAf,CAAV;MAAA,CAA3B;MACA,KAAKnB,aAAL,GAAqB,EAArB;MACA,KAAKC,UAAL,CAAgBkE,OAAhB,CAAwB,UAACzC,MAAD;QAAA,OAAY,MAAI,CAACA,MAAL,CAAYA,MAAZ,CAAZ;MAAA,CAAxB;MACA,KAAKzB,UAAL,GAAkB,EAAlB;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,wBAAe;MACXb,KAAK,CAAC,wBAAD,EAA2B,KAAKU,GAAhC,CAAL;MACA,KAAKsE,OAAL;MACA,KAAKpD,OAAL,CAAa,sBAAb;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,mBAAU;MACN,IAAI,KAAKN,IAAT,EAAe;QACX;QACA,KAAKA,IAAL,CAAUyD,OAAV,CAAkB,UAACE,UAAD;UAAA,OAAgBA,UAAU,EAA1B;QAAA,CAAlB;QACA,KAAK3D,IAAL,GAAY4D,SAAZ;MACH;;MACD,KAAKzE,EAAL,CAAQ,UAAR,EAAoB,IAApB;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,sBAAa;MACT,IAAI,KAAKQ,SAAT,EAAoB;QAChBjB,KAAK,CAAC,4BAAD,EAA+B,KAAKU,GAApC,CAAL;QACA,KAAK4B,MAAL,CAAY;UAAEC,IAAI,EAAE3C,kBAAkB,CAAC4C,UAAnB,CAA8B0B;QAAtC,CAAZ;MACH,CAJQ,CAKT;;;MACA,KAAKc,OAAL;;MACA,IAAI,KAAK/D,SAAT,EAAoB;QAChB;QACA,KAAKW,OAAL,CAAa,sBAAb;MACH;;MACD,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,iBAAQ;MACJ,OAAO,KAAKvB,UAAL,EAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,kBAASuC,SAAT,EAAmB;MACf,KAAK5B,KAAL,CAAW4B,QAAX,GAAsBA,SAAtB;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;SACI,eAAe;MACX,KAAK5B,KAAL,eAAsB,IAAtB;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,eAAM2D,QAAN,EAAgB;MACZ,KAAKH,aAAL,GAAqB,KAAKA,aAAL,IAAsB,EAA3C;;MACA,KAAKA,aAAL,CAAmBnB,IAAnB,CAAwBsB,QAAxB;;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,oBAAWA,QAAX,EAAqB;MACjB,KAAKH,aAAL,GAAqB,KAAKA,aAAL,IAAsB,EAA3C;;MACA,KAAKA,aAAL,CAAmBxC,OAAnB,CAA2B2C,QAA3B;;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,gBAAOA,QAAP,EAAiB;MACb,IAAI,CAAC,KAAKH,aAAV,EAAyB;QACrB,OAAO,IAAP;MACH;;MACD,IAAIG,QAAJ,EAAc;QACV,IAAMF,SAAS,GAAG,KAAKD,aAAvB;;QACA,KAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,SAAS,CAAC5B,MAA9B,EAAsCsC,CAAC,EAAvC,EAA2C;UACvC,IAAIR,QAAQ,KAAKF,SAAS,CAACU,CAAD,CAA1B,EAA+B;YAC3BV,SAAS,CAACW,MAAV,CAAiBD,CAAjB,EAAoB,CAApB;YACA,OAAO,IAAP;UACH;QACJ;MACJ,CARD,MASK;QACD,KAAKX,aAAL,GAAqB,EAArB;MACH;;MACD,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,wBAAe;MACX,OAAO,KAAKA,aAAL,IAAsB,EAA7B;IACH;;;;EAtbgB1E,O;;AAwbrBL,OAAO,CAACE,MAAR,GAAiBA,MAAjB"},"metadata":{},"sourceType":"script"}