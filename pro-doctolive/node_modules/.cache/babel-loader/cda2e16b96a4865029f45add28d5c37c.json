{"ast":null,"code":"var XMLHttpRequest = require(\"xmlhttprequest-ssl\");\n\nvar XHR = require(\"./polling-xhr\");\n\nvar JSONP = require(\"./polling-jsonp\");\n\nvar websocket = require(\"./websocket\");\n\nexports.polling = polling;\nexports.websocket = websocket;\n/**\r\n * Polling transport polymorphic constructor.\r\n * Decides on xhr vs jsonp based on feature detection.\r\n *\r\n * @api private\r\n */\n\nfunction polling(opts) {\n  var xhr;\n  var xd = false;\n  var xs = false;\n  var jsonp = false !== opts.jsonp;\n\n  if (typeof location !== \"undefined\") {\n    var isSSL = \"https:\" === location.protocol;\n    var port = location.port; // some user agents have empty `location.port`\n\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    xd = opts.hostname !== location.hostname || port !== opts.port;\n    xs = opts.secure !== isSSL;\n  }\n\n  opts.xdomain = xd;\n  opts.xscheme = xs;\n  xhr = new XMLHttpRequest(opts);\n\n  if (\"open\" in xhr && !opts.forceJSONP) {\n    return new XHR(opts);\n  } else {\n    if (!jsonp) throw new Error(\"JSONP disabled\");\n    return new JSONP(opts);\n  }\n}","map":{"version":3,"names":["XMLHttpRequest","require","XHR","JSONP","websocket","exports","polling","opts","xhr","xd","xs","jsonp","location","isSSL","protocol","port","hostname","secure","xdomain","xscheme","forceJSONP","Error"],"sources":["C:/app/doctolive_code/pro-doctolive/node_modules/engine.io-client/lib/transports/index.js"],"sourcesContent":["const XMLHttpRequest = require(\"xmlhttprequest-ssl\");\r\nconst XHR = require(\"./polling-xhr\");\r\nconst JSONP = require(\"./polling-jsonp\");\r\nconst websocket = require(\"./websocket\");\r\n\r\nexports.polling = polling;\r\nexports.websocket = websocket;\r\n\r\n/**\r\n * Polling transport polymorphic constructor.\r\n * Decides on xhr vs jsonp based on feature detection.\r\n *\r\n * @api private\r\n */\r\n\r\nfunction polling(opts) {\r\n  let xhr;\r\n  let xd = false;\r\n  let xs = false;\r\n  const jsonp = false !== opts.jsonp;\r\n\r\n  if (typeof location !== \"undefined\") {\r\n    const isSSL = \"https:\" === location.protocol;\r\n    let port = location.port;\r\n\r\n    // some user agents have empty `location.port`\r\n    if (!port) {\r\n      port = isSSL ? 443 : 80;\r\n    }\r\n\r\n    xd = opts.hostname !== location.hostname || port !== opts.port;\r\n    xs = opts.secure !== isSSL;\r\n  }\r\n\r\n  opts.xdomain = xd;\r\n  opts.xscheme = xs;\r\n  xhr = new XMLHttpRequest(opts);\r\n\r\n  if (\"open\" in xhr && !opts.forceJSONP) {\r\n    return new XHR(opts);\r\n  } else {\r\n    if (!jsonp) throw new Error(\"JSONP disabled\");\r\n    return new JSONP(opts);\r\n  }\r\n}\r\n"],"mappings":"AAAA,IAAMA,cAAc,GAAGC,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,eAAD,CAAnB;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,iBAAD,CAArB;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAzB;;AAEAI,OAAO,CAACC,OAAR,GAAkBA,OAAlB;AACAD,OAAO,CAACD,SAAR,GAAoBA,SAApB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASE,OAAT,CAAiBC,IAAjB,EAAuB;EACrB,IAAIC,GAAJ;EACA,IAAIC,EAAE,GAAG,KAAT;EACA,IAAIC,EAAE,GAAG,KAAT;EACA,IAAMC,KAAK,GAAG,UAAUJ,IAAI,CAACI,KAA7B;;EAEA,IAAI,OAAOC,QAAP,KAAoB,WAAxB,EAAqC;IACnC,IAAMC,KAAK,GAAG,aAAaD,QAAQ,CAACE,QAApC;IACA,IAAIC,IAAI,GAAGH,QAAQ,CAACG,IAApB,CAFmC,CAInC;;IACA,IAAI,CAACA,IAAL,EAAW;MACTA,IAAI,GAAGF,KAAK,GAAG,GAAH,GAAS,EAArB;IACD;;IAEDJ,EAAE,GAAGF,IAAI,CAACS,QAAL,KAAkBJ,QAAQ,CAACI,QAA3B,IAAuCD,IAAI,KAAKR,IAAI,CAACQ,IAA1D;IACAL,EAAE,GAAGH,IAAI,CAACU,MAAL,KAAgBJ,KAArB;EACD;;EAEDN,IAAI,CAACW,OAAL,GAAeT,EAAf;EACAF,IAAI,CAACY,OAAL,GAAeT,EAAf;EACAF,GAAG,GAAG,IAAIR,cAAJ,CAAmBO,IAAnB,CAAN;;EAEA,IAAI,UAAUC,GAAV,IAAiB,CAACD,IAAI,CAACa,UAA3B,EAAuC;IACrC,OAAO,IAAIlB,GAAJ,CAAQK,IAAR,CAAP;EACD,CAFD,MAEO;IACL,IAAI,CAACI,KAAL,EAAY,MAAM,IAAIU,KAAJ,CAAU,gBAAV,CAAN;IACZ,OAAO,IAAIlB,KAAJ,CAAUI,IAAV,CAAP;EACD;AACF"},"metadata":{},"sourceType":"script"}