{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\app\\\\doctolive_code\\\\pro-doctolive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\app\\\\doctolive_code\\\\pro-doctolive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:\\\\app\\\\doctolive_code\\\\pro-doctolive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\app\\\\doctolive_code\\\\pro-doctolive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar transports = require(\"./transports/index\");\n\nvar Emitter = require(\"component-emitter\");\n\nvar debug = require(\"debug\")(\"engine.io-client:socket\");\n\nvar parser = require(\"engine.io-parser\");\n\nvar parseuri = require(\"parseuri\");\n\nvar parseqs = require(\"parseqs\");\n\nvar Socket = /*#__PURE__*/function (_Emitter) {\n  \"use strict\";\n\n  _inherits(Socket, _Emitter);\n\n  var _super = _createSuper(Socket);\n\n  /**\r\n   * Socket constructor.\r\n   *\r\n   * @param {String|Object} uri or options\r\n   * @param {Object} options\r\n   * @api public\r\n   */\n  function Socket(uri) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Socket);\n\n    _this = _super.call(this);\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n\n    if (uri) {\n      uri = parseuri(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = parseuri(opts.host).host;\n    }\n\n    _this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = _this.secure ? \"443\" : \"80\";\n    }\n\n    _this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    _this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : _this.secure ? 443 : 80);\n    _this.transports = opts.transports || [\"polling\", \"websocket\"];\n    _this.readyState = \"\";\n    _this.writeBuffer = [];\n    _this.prevBufferLen = 0;\n    _this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      jsonp: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {}\n    }, opts);\n    _this.opts.path = _this.opts.path.replace(/\\/$/, \"\") + \"/\";\n\n    if (typeof _this.opts.query === \"string\") {\n      _this.opts.query = parseqs.decode(_this.opts.query);\n    } // set on handshake\n\n\n    _this.id = null;\n    _this.upgrades = null;\n    _this.pingInterval = null;\n    _this.pingTimeout = null; // set on heartbeat\n\n    _this.pingTimeoutTimer = null;\n\n    if (typeof addEventListener === \"function\") {\n      addEventListener(\"beforeunload\", function () {\n        if (_this.transport) {\n          // silently close the transport\n          _this.transport.removeAllListeners();\n\n          _this.transport.close();\n        }\n      }, false);\n    }\n\n    _this.open();\n\n    return _this;\n  }\n  /**\r\n   * Creates transport of the given type.\r\n   *\r\n   * @param {String} transport name\r\n   * @return {Transport}\r\n   * @api private\r\n   */\n\n\n  _createClass(Socket, [{\n    key: \"createTransport\",\n    value: function createTransport(name) {\n      debug('creating transport \"%s\"', name);\n      var query = clone(this.opts.query); // append engine.io protocol identifier\n\n      query.EIO = parser.protocol; // transport name\n\n      query.transport = name; // session id if we already have one\n\n      if (this.id) query.sid = this.id;\n      var opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n        query: query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      });\n      debug(\"options: %j\", opts);\n      return new transports[name](opts);\n    }\n    /**\r\n     * Initializes transport to use and starts probe.\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      var transport;\n\n      if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n        transport = \"websocket\";\n      } else if (0 === this.transports.length) {\n        // Emit error on next tick so it can be listened to\n        var self = this;\n        setTimeout(function () {\n          self.emit(\"error\", \"No transports available\");\n        }, 0);\n        return;\n      } else {\n        transport = this.transports[0];\n      }\n\n      this.readyState = \"opening\"; // Retry with the next transport if the transport is disabled (jsonp: false)\n\n      try {\n        transport = this.createTransport(transport);\n      } catch (e) {\n        debug(\"error while creating transport: %s\", e);\n        this.transports.shift();\n        this.open();\n        return;\n      }\n\n      transport.open();\n      this.setTransport(transport);\n    }\n    /**\r\n     * Sets the current transport. Disables the existing one (if any).\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"setTransport\",\n    value: function setTransport(transport) {\n      debug(\"setting transport %s\", transport.name);\n      var self = this;\n\n      if (this.transport) {\n        debug(\"clearing existing transport %s\", this.transport.name);\n        this.transport.removeAllListeners();\n      } // set up transport\n\n\n      this.transport = transport; // set up transport listeners\n\n      transport.on(\"drain\", function () {\n        self.onDrain();\n      }).on(\"packet\", function (packet) {\n        self.onPacket(packet);\n      }).on(\"error\", function (e) {\n        self.onError(e);\n      }).on(\"close\", function () {\n        self.onClose(\"transport close\");\n      });\n    }\n    /**\r\n     * Probes a transport.\r\n     *\r\n     * @param {String} transport name\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"probe\",\n    value: function probe(name) {\n      debug('probing transport \"%s\"', name);\n      var transport = this.createTransport(name, {\n        probe: 1\n      });\n      var failed = false;\n      var self = this;\n      Socket.priorWebsocketSuccess = false;\n\n      function onTransportOpen() {\n        if (self.onlyBinaryUpgrades) {\n          var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\n          failed = failed || upgradeLosesBinary;\n        }\n\n        if (failed) return;\n        debug('probe transport \"%s\" opened', name);\n        transport.send([{\n          type: \"ping\",\n          data: \"probe\"\n        }]);\n        transport.once(\"packet\", function (msg) {\n          if (failed) return;\n\n          if (\"pong\" === msg.type && \"probe\" === msg.data) {\n            debug('probe transport \"%s\" pong', name);\n            self.upgrading = true;\n            self.emit(\"upgrading\", transport);\n            if (!transport) return;\n            Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n            debug('pausing current transport \"%s\"', self.transport.name);\n            self.transport.pause(function () {\n              if (failed) return;\n              if (\"closed\" === self.readyState) return;\n              debug(\"changing transport and sending upgrade packet\");\n              cleanup();\n              self.setTransport(transport);\n              transport.send([{\n                type: \"upgrade\"\n              }]);\n              self.emit(\"upgrade\", transport);\n              transport = null;\n              self.upgrading = false;\n              self.flush();\n            });\n          } else {\n            debug('probe transport \"%s\" failed', name);\n            var err = new Error(\"probe error\");\n            err.transport = transport.name;\n            self.emit(\"upgradeError\", err);\n          }\n        });\n      }\n\n      function freezeTransport() {\n        if (failed) return; // Any callback called by transport should be ignored since now\n\n        failed = true;\n        cleanup();\n        transport.close();\n        transport = null;\n      } // Handle any error that happens while probing\n\n\n      function onerror(err) {\n        var error = new Error(\"probe error: \" + err);\n        error.transport = transport.name;\n        freezeTransport();\n        debug('probe transport \"%s\" failed because of error: %s', name, err);\n        self.emit(\"upgradeError\", error);\n      }\n\n      function onTransportClose() {\n        onerror(\"transport closed\");\n      } // When the socket is closed while we're probing\n\n\n      function onclose() {\n        onerror(\"socket closed\");\n      } // When the socket is upgraded while we're probing\n\n\n      function onupgrade(to) {\n        if (transport && to.name !== transport.name) {\n          debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n          freezeTransport();\n        }\n      } // Remove all listeners on the transport and on self\n\n\n      function cleanup() {\n        transport.removeListener(\"open\", onTransportOpen);\n        transport.removeListener(\"error\", onerror);\n        transport.removeListener(\"close\", onTransportClose);\n        self.removeListener(\"close\", onclose);\n        self.removeListener(\"upgrading\", onupgrade);\n      }\n\n      transport.once(\"open\", onTransportOpen);\n      transport.once(\"error\", onerror);\n      transport.once(\"close\", onTransportClose);\n      this.once(\"close\", onclose);\n      this.once(\"upgrading\", onupgrade);\n      transport.open();\n    }\n    /**\r\n     * Called when connection is deemed open.\r\n     *\r\n     * @api public\r\n     */\n\n  }, {\n    key: \"onOpen\",\n    value: function onOpen() {\n      debug(\"socket open\");\n      this.readyState = \"open\";\n      Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n      this.emit(\"open\");\n      this.flush(); // we check for `readyState` in case an `open`\n      // listener already closed the socket\n\n      if (\"open\" === this.readyState && this.opts.upgrade && this.transport.pause) {\n        debug(\"starting upgrade probes\");\n        var i = 0;\n        var l = this.upgrades.length;\n\n        for (; i < l; i++) {\n          this.probe(this.upgrades[i]);\n        }\n      }\n    }\n    /**\r\n     * Handles a packet.\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"onPacket\",\n    value: function onPacket(packet) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n        this.emit(\"packet\", packet); // Socket is live - any packet counts\n\n        this.emit(\"heartbeat\");\n\n        switch (packet.type) {\n          case \"open\":\n            this.onHandshake(JSON.parse(packet.data));\n            break;\n\n          case \"ping\":\n            this.resetPingTimeout();\n            this.sendPacket(\"pong\");\n            this.emit(\"pong\");\n            break;\n\n          case \"error\":\n            var err = new Error(\"server error\");\n            err.code = packet.data;\n            this.onError(err);\n            break;\n\n          case \"message\":\n            this.emit(\"data\", packet.data);\n            this.emit(\"message\", packet.data);\n            break;\n        }\n      } else {\n        debug('packet received with socket readyState \"%s\"', this.readyState);\n      }\n    }\n    /**\r\n     * Called upon handshake completion.\r\n     *\r\n     * @param {Object} handshake obj\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"onHandshake\",\n    value: function onHandshake(data) {\n      this.emit(\"handshake\", data);\n      this.id = data.sid;\n      this.transport.query.sid = data.sid;\n      this.upgrades = this.filterUpgrades(data.upgrades);\n      this.pingInterval = data.pingInterval;\n      this.pingTimeout = data.pingTimeout;\n      this.onOpen(); // In case open handler closes socket\n\n      if (\"closed\" === this.readyState) return;\n      this.resetPingTimeout();\n    }\n    /**\r\n     * Sets and resets ping timeout timer based on server pings.\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"resetPingTimeout\",\n    value: function resetPingTimeout() {\n      var _this2 = this;\n\n      clearTimeout(this.pingTimeoutTimer);\n      this.pingTimeoutTimer = setTimeout(function () {\n        _this2.onClose(\"ping timeout\");\n      }, this.pingInterval + this.pingTimeout);\n    }\n    /**\r\n     * Called on `drain` event\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"onDrain\",\n    value: function onDrain() {\n      this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important\n      // for example, when upgrading, upgrade packet is sent over,\n      // and a nonzero prevBufferLen could cause problems on `drain`\n\n      this.prevBufferLen = 0;\n\n      if (0 === this.writeBuffer.length) {\n        this.emit(\"drain\");\n      } else {\n        this.flush();\n      }\n    }\n    /**\r\n     * Flush write buffers.\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n        debug(\"flushing %d packets in socket\", this.writeBuffer.length);\n        this.transport.send(this.writeBuffer); // keep track of current length of writeBuffer\n        // splice writeBuffer and callbackBuffer on `drain`\n\n        this.prevBufferLen = this.writeBuffer.length;\n        this.emit(\"flush\");\n      }\n    }\n    /**\r\n     * Sends a message.\r\n     *\r\n     * @param {String} message.\r\n     * @param {Function} callback function.\r\n     * @param {Object} options.\r\n     * @return {Socket} for chaining.\r\n     * @api public\r\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n  }, {\n    key: \"send\",\n    value: function send(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param {String} packet type.\r\n     * @param {String} data.\r\n     * @param {Object} options.\r\n     * @param {Function} callback function.\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"sendPacket\",\n    value: function sendPacket(type, data, options, fn) {\n      if (\"function\" === typeof data) {\n        fn = data;\n        data = undefined;\n      }\n\n      if (\"function\" === typeof options) {\n        fn = options;\n        options = null;\n      }\n\n      if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n        return;\n      }\n\n      options = options || {};\n      options.compress = false !== options.compress;\n      var packet = {\n        type: type,\n        data: data,\n        options: options\n      };\n      this.emit(\"packetCreate\", packet);\n      this.writeBuffer.push(packet);\n      if (fn) this.once(\"flush\", fn);\n      this.flush();\n    }\n    /**\r\n     * Closes the connection.\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var self = this;\n\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.readyState = \"closing\";\n\n        if (this.writeBuffer.length) {\n          this.once(\"drain\", function () {\n            if (this.upgrading) {\n              waitForUpgrade();\n            } else {\n              close();\n            }\n          });\n        } else if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      }\n\n      function close() {\n        self.onClose(\"forced close\");\n        debug(\"socket closing - telling transport to close\");\n        self.transport.close();\n      }\n\n      function cleanupAndClose() {\n        self.removeListener(\"upgrade\", cleanupAndClose);\n        self.removeListener(\"upgradeError\", cleanupAndClose);\n        close();\n      }\n\n      function waitForUpgrade() {\n        // wait for upgrade to finish since we can't send packets while pausing a transport\n        self.once(\"upgrade\", cleanupAndClose);\n        self.once(\"upgradeError\", cleanupAndClose);\n      }\n\n      return this;\n    }\n    /**\r\n     * Called upon transport error\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"onError\",\n    value: function onError(err) {\n      debug(\"socket error %j\", err);\n      Socket.priorWebsocketSuccess = false;\n      this.emit(\"error\", err);\n      this.onClose(\"transport error\", err);\n    }\n    /**\r\n     * Called upon transport close.\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose(reason, desc) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        debug('socket close with reason: \"%s\"', reason);\n        var self = this; // clear timers\n\n        clearTimeout(this.pingIntervalTimer);\n        clearTimeout(this.pingTimeoutTimer); // stop event from firing again for transport\n\n        this.transport.removeAllListeners(\"close\"); // ensure transport won't stay open\n\n        this.transport.close(); // ignore further transport communication\n\n        this.transport.removeAllListeners(); // set ready state\n\n        this.readyState = \"closed\"; // clear session id\n\n        this.id = null; // emit close event\n\n        this.emit(\"close\", reason, desc); // clean buffers after, so users can still\n        // grab the buffers on `close` event\n\n        self.writeBuffer = [];\n        self.prevBufferLen = 0;\n      }\n    }\n    /**\r\n     * Filters upgrades, returning only those matching client transports.\r\n     *\r\n     * @param {Array} server upgrades\r\n     * @api private\r\n     *\r\n     */\n\n  }, {\n    key: \"filterUpgrades\",\n    value: function filterUpgrades(upgrades) {\n      var filteredUpgrades = [];\n      var i = 0;\n      var j = upgrades.length;\n\n      for (; i < j; i++) {\n        if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n      }\n\n      return filteredUpgrades;\n    }\n  }]);\n\n  return Socket;\n}(Emitter);\n\nSocket.priorWebsocketSuccess = false;\n/**\r\n * Protocol version.\r\n *\r\n * @api public\r\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\nfunction clone(obj) {\n  var o = {};\n\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n\n  return o;\n}\n\nmodule.exports = Socket;","map":{"version":3,"names":["transports","require","Emitter","debug","parser","parseuri","parseqs","Socket","uri","opts","hostname","host","secure","protocol","port","query","location","readyState","writeBuffer","prevBufferLen","Object","assign","path","agent","withCredentials","upgrade","jsonp","timestampParam","rememberUpgrade","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","replace","decode","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","addEventListener","transport","removeAllListeners","close","open","name","clone","EIO","sid","socket","priorWebsocketSuccess","indexOf","length","self","setTimeout","emit","createTransport","e","shift","setTransport","on","onDrain","packet","onPacket","onError","onClose","probe","failed","onTransportOpen","onlyBinaryUpgrades","upgradeLosesBinary","supportsBinary","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","i","l","onHandshake","JSON","parse","resetPingTimeout","sendPacket","code","filterUpgrades","onOpen","clearTimeout","splice","writable","options","fn","undefined","compress","push","waitForUpgrade","cleanupAndClose","reason","desc","pingIntervalTimer","filteredUpgrades","j","obj","o","hasOwnProperty","module","exports"],"sources":["C:/app/doctolive_code/pro-doctolive/node_modules/engine.io-client/lib/socket.js"],"sourcesContent":["const transports = require(\"./transports/index\");\r\nconst Emitter = require(\"component-emitter\");\r\nconst debug = require(\"debug\")(\"engine.io-client:socket\");\r\nconst parser = require(\"engine.io-parser\");\r\nconst parseuri = require(\"parseuri\");\r\nconst parseqs = require(\"parseqs\");\r\n\r\nclass Socket extends Emitter {\r\n  /**\r\n   * Socket constructor.\r\n   *\r\n   * @param {String|Object} uri or options\r\n   * @param {Object} options\r\n   * @api public\r\n   */\r\n  constructor(uri, opts = {}) {\r\n    super();\r\n\r\n    if (uri && \"object\" === typeof uri) {\r\n      opts = uri;\r\n      uri = null;\r\n    }\r\n\r\n    if (uri) {\r\n      uri = parseuri(uri);\r\n      opts.hostname = uri.host;\r\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\r\n      opts.port = uri.port;\r\n      if (uri.query) opts.query = uri.query;\r\n    } else if (opts.host) {\r\n      opts.hostname = parseuri(opts.host).host;\r\n    }\r\n\r\n    this.secure =\r\n      null != opts.secure\r\n        ? opts.secure\r\n        : typeof location !== \"undefined\" && \"https:\" === location.protocol;\r\n\r\n    if (opts.hostname && !opts.port) {\r\n      // if no port is specified manually, use the protocol default\r\n      opts.port = this.secure ? \"443\" : \"80\";\r\n    }\r\n\r\n    this.hostname =\r\n      opts.hostname ||\r\n      (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\r\n    this.port =\r\n      opts.port ||\r\n      (typeof location !== \"undefined\" && location.port\r\n        ? location.port\r\n        : this.secure\r\n        ? 443\r\n        : 80);\r\n\r\n    this.transports = opts.transports || [\"polling\", \"websocket\"];\r\n    this.readyState = \"\";\r\n    this.writeBuffer = [];\r\n    this.prevBufferLen = 0;\r\n\r\n    this.opts = Object.assign(\r\n      {\r\n        path: \"/engine.io\",\r\n        agent: false,\r\n        withCredentials: false,\r\n        upgrade: true,\r\n        jsonp: true,\r\n        timestampParam: \"t\",\r\n        rememberUpgrade: false,\r\n        rejectUnauthorized: true,\r\n        perMessageDeflate: {\r\n          threshold: 1024\r\n        },\r\n        transportOptions: {}\r\n      },\r\n      opts\r\n    );\r\n\r\n    this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\r\n\r\n    if (typeof this.opts.query === \"string\") {\r\n      this.opts.query = parseqs.decode(this.opts.query);\r\n    }\r\n\r\n    // set on handshake\r\n    this.id = null;\r\n    this.upgrades = null;\r\n    this.pingInterval = null;\r\n    this.pingTimeout = null;\r\n\r\n    // set on heartbeat\r\n    this.pingTimeoutTimer = null;\r\n\r\n    if (typeof addEventListener === \"function\") {\r\n      addEventListener(\r\n        \"beforeunload\",\r\n        () => {\r\n          if (this.transport) {\r\n            // silently close the transport\r\n            this.transport.removeAllListeners();\r\n            this.transport.close();\r\n          }\r\n        },\r\n        false\r\n      );\r\n    }\r\n\r\n    this.open();\r\n  }\r\n\r\n  /**\r\n   * Creates transport of the given type.\r\n   *\r\n   * @param {String} transport name\r\n   * @return {Transport}\r\n   * @api private\r\n   */\r\n  createTransport(name) {\r\n    debug('creating transport \"%s\"', name);\r\n    const query = clone(this.opts.query);\r\n\r\n    // append engine.io protocol identifier\r\n    query.EIO = parser.protocol;\r\n\r\n    // transport name\r\n    query.transport = name;\r\n\r\n    // session id if we already have one\r\n    if (this.id) query.sid = this.id;\r\n\r\n    const opts = Object.assign(\r\n      {},\r\n      this.opts.transportOptions[name],\r\n      this.opts,\r\n      {\r\n        query,\r\n        socket: this,\r\n        hostname: this.hostname,\r\n        secure: this.secure,\r\n        port: this.port\r\n      }\r\n    );\r\n\r\n    debug(\"options: %j\", opts);\r\n\r\n    return new transports[name](opts);\r\n  }\r\n\r\n  /**\r\n   * Initializes transport to use and starts probe.\r\n   *\r\n   * @api private\r\n   */\r\n  open() {\r\n    let transport;\r\n    if (\r\n      this.opts.rememberUpgrade &&\r\n      Socket.priorWebsocketSuccess &&\r\n      this.transports.indexOf(\"websocket\") !== -1\r\n    ) {\r\n      transport = \"websocket\";\r\n    } else if (0 === this.transports.length) {\r\n      // Emit error on next tick so it can be listened to\r\n      const self = this;\r\n      setTimeout(function() {\r\n        self.emit(\"error\", \"No transports available\");\r\n      }, 0);\r\n      return;\r\n    } else {\r\n      transport = this.transports[0];\r\n    }\r\n    this.readyState = \"opening\";\r\n\r\n    // Retry with the next transport if the transport is disabled (jsonp: false)\r\n    try {\r\n      transport = this.createTransport(transport);\r\n    } catch (e) {\r\n      debug(\"error while creating transport: %s\", e);\r\n      this.transports.shift();\r\n      this.open();\r\n      return;\r\n    }\r\n\r\n    transport.open();\r\n    this.setTransport(transport);\r\n  }\r\n\r\n  /**\r\n   * Sets the current transport. Disables the existing one (if any).\r\n   *\r\n   * @api private\r\n   */\r\n  setTransport(transport) {\r\n    debug(\"setting transport %s\", transport.name);\r\n    const self = this;\r\n\r\n    if (this.transport) {\r\n      debug(\"clearing existing transport %s\", this.transport.name);\r\n      this.transport.removeAllListeners();\r\n    }\r\n\r\n    // set up transport\r\n    this.transport = transport;\r\n\r\n    // set up transport listeners\r\n    transport\r\n      .on(\"drain\", function() {\r\n        self.onDrain();\r\n      })\r\n      .on(\"packet\", function(packet) {\r\n        self.onPacket(packet);\r\n      })\r\n      .on(\"error\", function(e) {\r\n        self.onError(e);\r\n      })\r\n      .on(\"close\", function() {\r\n        self.onClose(\"transport close\");\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Probes a transport.\r\n   *\r\n   * @param {String} transport name\r\n   * @api private\r\n   */\r\n  probe(name) {\r\n    debug('probing transport \"%s\"', name);\r\n    let transport = this.createTransport(name, { probe: 1 });\r\n    let failed = false;\r\n    const self = this;\r\n\r\n    Socket.priorWebsocketSuccess = false;\r\n\r\n    function onTransportOpen() {\r\n      if (self.onlyBinaryUpgrades) {\r\n        const upgradeLosesBinary =\r\n          !this.supportsBinary && self.transport.supportsBinary;\r\n        failed = failed || upgradeLosesBinary;\r\n      }\r\n      if (failed) return;\r\n\r\n      debug('probe transport \"%s\" opened', name);\r\n      transport.send([{ type: \"ping\", data: \"probe\" }]);\r\n      transport.once(\"packet\", function(msg) {\r\n        if (failed) return;\r\n        if (\"pong\" === msg.type && \"probe\" === msg.data) {\r\n          debug('probe transport \"%s\" pong', name);\r\n          self.upgrading = true;\r\n          self.emit(\"upgrading\", transport);\r\n          if (!transport) return;\r\n          Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\r\n\r\n          debug('pausing current transport \"%s\"', self.transport.name);\r\n          self.transport.pause(function() {\r\n            if (failed) return;\r\n            if (\"closed\" === self.readyState) return;\r\n            debug(\"changing transport and sending upgrade packet\");\r\n\r\n            cleanup();\r\n\r\n            self.setTransport(transport);\r\n            transport.send([{ type: \"upgrade\" }]);\r\n            self.emit(\"upgrade\", transport);\r\n            transport = null;\r\n            self.upgrading = false;\r\n            self.flush();\r\n          });\r\n        } else {\r\n          debug('probe transport \"%s\" failed', name);\r\n          const err = new Error(\"probe error\");\r\n          err.transport = transport.name;\r\n          self.emit(\"upgradeError\", err);\r\n        }\r\n      });\r\n    }\r\n\r\n    function freezeTransport() {\r\n      if (failed) return;\r\n\r\n      // Any callback called by transport should be ignored since now\r\n      failed = true;\r\n\r\n      cleanup();\r\n\r\n      transport.close();\r\n      transport = null;\r\n    }\r\n\r\n    // Handle any error that happens while probing\r\n    function onerror(err) {\r\n      const error = new Error(\"probe error: \" + err);\r\n      error.transport = transport.name;\r\n\r\n      freezeTransport();\r\n\r\n      debug('probe transport \"%s\" failed because of error: %s', name, err);\r\n\r\n      self.emit(\"upgradeError\", error);\r\n    }\r\n\r\n    function onTransportClose() {\r\n      onerror(\"transport closed\");\r\n    }\r\n\r\n    // When the socket is closed while we're probing\r\n    function onclose() {\r\n      onerror(\"socket closed\");\r\n    }\r\n\r\n    // When the socket is upgraded while we're probing\r\n    function onupgrade(to) {\r\n      if (transport && to.name !== transport.name) {\r\n        debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\r\n        freezeTransport();\r\n      }\r\n    }\r\n\r\n    // Remove all listeners on the transport and on self\r\n    function cleanup() {\r\n      transport.removeListener(\"open\", onTransportOpen);\r\n      transport.removeListener(\"error\", onerror);\r\n      transport.removeListener(\"close\", onTransportClose);\r\n      self.removeListener(\"close\", onclose);\r\n      self.removeListener(\"upgrading\", onupgrade);\r\n    }\r\n\r\n    transport.once(\"open\", onTransportOpen);\r\n    transport.once(\"error\", onerror);\r\n    transport.once(\"close\", onTransportClose);\r\n\r\n    this.once(\"close\", onclose);\r\n    this.once(\"upgrading\", onupgrade);\r\n\r\n    transport.open();\r\n  }\r\n\r\n  /**\r\n   * Called when connection is deemed open.\r\n   *\r\n   * @api public\r\n   */\r\n  onOpen() {\r\n    debug(\"socket open\");\r\n    this.readyState = \"open\";\r\n    Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\r\n    this.emit(\"open\");\r\n    this.flush();\r\n\r\n    // we check for `readyState` in case an `open`\r\n    // listener already closed the socket\r\n    if (\r\n      \"open\" === this.readyState &&\r\n      this.opts.upgrade &&\r\n      this.transport.pause\r\n    ) {\r\n      debug(\"starting upgrade probes\");\r\n      let i = 0;\r\n      const l = this.upgrades.length;\r\n      for (; i < l; i++) {\r\n        this.probe(this.upgrades[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles a packet.\r\n   *\r\n   * @api private\r\n   */\r\n  onPacket(packet) {\r\n    if (\r\n      \"opening\" === this.readyState ||\r\n      \"open\" === this.readyState ||\r\n      \"closing\" === this.readyState\r\n    ) {\r\n      debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\r\n\r\n      this.emit(\"packet\", packet);\r\n\r\n      // Socket is live - any packet counts\r\n      this.emit(\"heartbeat\");\r\n\r\n      switch (packet.type) {\r\n        case \"open\":\r\n          this.onHandshake(JSON.parse(packet.data));\r\n          break;\r\n\r\n        case \"ping\":\r\n          this.resetPingTimeout();\r\n          this.sendPacket(\"pong\");\r\n          this.emit(\"pong\");\r\n          break;\r\n\r\n        case \"error\":\r\n          const err = new Error(\"server error\");\r\n          err.code = packet.data;\r\n          this.onError(err);\r\n          break;\r\n\r\n        case \"message\":\r\n          this.emit(\"data\", packet.data);\r\n          this.emit(\"message\", packet.data);\r\n          break;\r\n      }\r\n    } else {\r\n      debug('packet received with socket readyState \"%s\"', this.readyState);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called upon handshake completion.\r\n   *\r\n   * @param {Object} handshake obj\r\n   * @api private\r\n   */\r\n  onHandshake(data) {\r\n    this.emit(\"handshake\", data);\r\n    this.id = data.sid;\r\n    this.transport.query.sid = data.sid;\r\n    this.upgrades = this.filterUpgrades(data.upgrades);\r\n    this.pingInterval = data.pingInterval;\r\n    this.pingTimeout = data.pingTimeout;\r\n    this.onOpen();\r\n    // In case open handler closes socket\r\n    if (\"closed\" === this.readyState) return;\r\n    this.resetPingTimeout();\r\n  }\r\n\r\n  /**\r\n   * Sets and resets ping timeout timer based on server pings.\r\n   *\r\n   * @api private\r\n   */\r\n  resetPingTimeout() {\r\n    clearTimeout(this.pingTimeoutTimer);\r\n    this.pingTimeoutTimer = setTimeout(() => {\r\n      this.onClose(\"ping timeout\");\r\n    }, this.pingInterval + this.pingTimeout);\r\n  }\r\n\r\n  /**\r\n   * Called on `drain` event\r\n   *\r\n   * @api private\r\n   */\r\n  onDrain() {\r\n    this.writeBuffer.splice(0, this.prevBufferLen);\r\n\r\n    // setting prevBufferLen = 0 is very important\r\n    // for example, when upgrading, upgrade packet is sent over,\r\n    // and a nonzero prevBufferLen could cause problems on `drain`\r\n    this.prevBufferLen = 0;\r\n\r\n    if (0 === this.writeBuffer.length) {\r\n      this.emit(\"drain\");\r\n    } else {\r\n      this.flush();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Flush write buffers.\r\n   *\r\n   * @api private\r\n   */\r\n  flush() {\r\n    if (\r\n      \"closed\" !== this.readyState &&\r\n      this.transport.writable &&\r\n      !this.upgrading &&\r\n      this.writeBuffer.length\r\n    ) {\r\n      debug(\"flushing %d packets in socket\", this.writeBuffer.length);\r\n      this.transport.send(this.writeBuffer);\r\n      // keep track of current length of writeBuffer\r\n      // splice writeBuffer and callbackBuffer on `drain`\r\n      this.prevBufferLen = this.writeBuffer.length;\r\n      this.emit(\"flush\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sends a message.\r\n   *\r\n   * @param {String} message.\r\n   * @param {Function} callback function.\r\n   * @param {Object} options.\r\n   * @return {Socket} for chaining.\r\n   * @api public\r\n   */\r\n  write(msg, options, fn) {\r\n    this.sendPacket(\"message\", msg, options, fn);\r\n    return this;\r\n  }\r\n\r\n  send(msg, options, fn) {\r\n    this.sendPacket(\"message\", msg, options, fn);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sends a packet.\r\n   *\r\n   * @param {String} packet type.\r\n   * @param {String} data.\r\n   * @param {Object} options.\r\n   * @param {Function} callback function.\r\n   * @api private\r\n   */\r\n  sendPacket(type, data, options, fn) {\r\n    if (\"function\" === typeof data) {\r\n      fn = data;\r\n      data = undefined;\r\n    }\r\n\r\n    if (\"function\" === typeof options) {\r\n      fn = options;\r\n      options = null;\r\n    }\r\n\r\n    if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\r\n      return;\r\n    }\r\n\r\n    options = options || {};\r\n    options.compress = false !== options.compress;\r\n\r\n    const packet = {\r\n      type: type,\r\n      data: data,\r\n      options: options\r\n    };\r\n    this.emit(\"packetCreate\", packet);\r\n    this.writeBuffer.push(packet);\r\n    if (fn) this.once(\"flush\", fn);\r\n    this.flush();\r\n  }\r\n\r\n  /**\r\n   * Closes the connection.\r\n   *\r\n   * @api private\r\n   */\r\n  close() {\r\n    const self = this;\r\n\r\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\r\n      this.readyState = \"closing\";\r\n\r\n      if (this.writeBuffer.length) {\r\n        this.once(\"drain\", function() {\r\n          if (this.upgrading) {\r\n            waitForUpgrade();\r\n          } else {\r\n            close();\r\n          }\r\n        });\r\n      } else if (this.upgrading) {\r\n        waitForUpgrade();\r\n      } else {\r\n        close();\r\n      }\r\n    }\r\n\r\n    function close() {\r\n      self.onClose(\"forced close\");\r\n      debug(\"socket closing - telling transport to close\");\r\n      self.transport.close();\r\n    }\r\n\r\n    function cleanupAndClose() {\r\n      self.removeListener(\"upgrade\", cleanupAndClose);\r\n      self.removeListener(\"upgradeError\", cleanupAndClose);\r\n      close();\r\n    }\r\n\r\n    function waitForUpgrade() {\r\n      // wait for upgrade to finish since we can't send packets while pausing a transport\r\n      self.once(\"upgrade\", cleanupAndClose);\r\n      self.once(\"upgradeError\", cleanupAndClose);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Called upon transport error\r\n   *\r\n   * @api private\r\n   */\r\n  onError(err) {\r\n    debug(\"socket error %j\", err);\r\n    Socket.priorWebsocketSuccess = false;\r\n    this.emit(\"error\", err);\r\n    this.onClose(\"transport error\", err);\r\n  }\r\n\r\n  /**\r\n   * Called upon transport close.\r\n   *\r\n   * @api private\r\n   */\r\n  onClose(reason, desc) {\r\n    if (\r\n      \"opening\" === this.readyState ||\r\n      \"open\" === this.readyState ||\r\n      \"closing\" === this.readyState\r\n    ) {\r\n      debug('socket close with reason: \"%s\"', reason);\r\n      const self = this;\r\n\r\n      // clear timers\r\n      clearTimeout(this.pingIntervalTimer);\r\n      clearTimeout(this.pingTimeoutTimer);\r\n\r\n      // stop event from firing again for transport\r\n      this.transport.removeAllListeners(\"close\");\r\n\r\n      // ensure transport won't stay open\r\n      this.transport.close();\r\n\r\n      // ignore further transport communication\r\n      this.transport.removeAllListeners();\r\n\r\n      // set ready state\r\n      this.readyState = \"closed\";\r\n\r\n      // clear session id\r\n      this.id = null;\r\n\r\n      // emit close event\r\n      this.emit(\"close\", reason, desc);\r\n\r\n      // clean buffers after, so users can still\r\n      // grab the buffers on `close` event\r\n      self.writeBuffer = [];\r\n      self.prevBufferLen = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Filters upgrades, returning only those matching client transports.\r\n   *\r\n   * @param {Array} server upgrades\r\n   * @api private\r\n   *\r\n   */\r\n  filterUpgrades(upgrades) {\r\n    const filteredUpgrades = [];\r\n    let i = 0;\r\n    const j = upgrades.length;\r\n    for (; i < j; i++) {\r\n      if (~this.transports.indexOf(upgrades[i]))\r\n        filteredUpgrades.push(upgrades[i]);\r\n    }\r\n    return filteredUpgrades;\r\n  }\r\n}\r\n\r\nSocket.priorWebsocketSuccess = false;\r\n\r\n/**\r\n * Protocol version.\r\n *\r\n * @api public\r\n */\r\n\r\nSocket.protocol = parser.protocol; // this is an int\r\n\r\nfunction clone(obj) {\r\n  const o = {};\r\n  for (let i in obj) {\r\n    if (obj.hasOwnProperty(i)) {\r\n      o[i] = obj[i];\r\n    }\r\n  }\r\n  return o;\r\n}\r\n\r\nmodule.exports = Socket;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}