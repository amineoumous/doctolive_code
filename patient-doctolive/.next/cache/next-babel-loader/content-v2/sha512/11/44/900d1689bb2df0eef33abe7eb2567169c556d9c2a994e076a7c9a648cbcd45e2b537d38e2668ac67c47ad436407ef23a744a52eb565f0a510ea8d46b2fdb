{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\app\\\\doctolive_code\\\\patient-doctolive\\\\components\\\\Chat\\\\messages\\\\index.jsx\";\nimport React, { useRef, useEffect } from 'react';\n\nconst Messages = ({\n  messages,\n  storedMessages\n}) => {\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    if (messagesEndRef !== null) {\n      if (messagesEndRef !== null) {\n        let timer = setTimeout(() => {\n          if (messagesEndRef.current) {\n            messagesEndRef.current.scrollIntoView({\n              behavior: \"smooth\",\n              block: \"nearest\",\n              inline: \"start\"\n            });\n          }\n        }, 200);\n        return () => clearTimeout(timer);\n      }\n    }\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [storedMessages ? storedMessages.map((message, i) => /*#__PURE__*/_jsxDEV(StoredMessage, {\n        message: message\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 61\n      }, this)) : null, messages ? messages.map((message, i) => /*#__PURE__*/_jsxDEV(Message, {\n        message: message\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 49\n      }, this)) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Messages;\n\nconst Message = ({\n  message: {\n    data,\n    isSentByCurrentUser\n  }\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: isSentByCurrentUser ? \"messageContainer sent\" : \"messageContainer replies\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"messageText\",\n        children: data.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\nconst StoredMessage = ({\n  message\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: message.sentTo === \"medecin\" ? \"messageContainer sent\" : \"messageContainer replies\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"messageText\",\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/app/doctolive_code/patient-doctolive/components/Chat/messages/index.jsx"],"names":["React","useRef","useEffect","Messages","messages","storedMessages","messagesEndRef","timer","setTimeout","current","scrollIntoView","behavior","block","inline","clearTimeout","map","message","i","Message","data","isSentByCurrentUser","StoredMessage","sentTo"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,MAAd,EAAsBC,SAAtB,QAAsC,OAAtC;;AAIA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAkC;AACjD,QAAMC,cAAc,GAAGL,MAAM,CAAC,IAAD,CAA7B;AACAC,EAAAA,SAAS,CAAE,MAAK;AACf,QAAGI,cAAc,KAAK,IAAtB,EAA2B;AACtB,UAAGA,cAAc,KAAK,IAAtB,EAA2B;AACzB,YAAIC,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC3B,cAAGF,cAAc,CAACG,OAAlB,EAA0B;AACxBH,YAAAA,cAAc,CAACG,OAAf,CAAuBC,cAAvB,CAAsC;AAAEC,cAAAA,QAAQ,EAAE,QAAZ;AAAsBC,cAAAA,KAAK,EAAC,SAA5B;AAAuCC,cAAAA,MAAM,EAAC;AAA9C,aAAtC;AACD;AACJ,SAJuB,EAIrB,GAJqB,CAAtB;AAKF,eAAO,MAAMC,YAAY,CAACP,KAAD,CAAzB;AACD;AACH;AACD,GAXQ,EAWN,CAACH,QAAD,CAXM,CAAT;AAYA,sBACE;AAAM,IAAA,SAAS,EAAC,SAAhB;AAAA,2BAEE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,iBACEC,cAAc,GAAGA,cAAc,CAACU,GAAf,CAAmB,CAACC,OAAD,EAAUC,CAAV,kBAAgB,QAAC,aAAD;AAAuB,QAAA,OAAO,EAAED;AAAhC,SAAoBC,CAApB;AAAA;AAAA;AAAA;AAAA,cAAnC,CAAH,GAAoF,IADpG,EAEEb,QAAQ,GAAGA,QAAQ,CAACW,GAAT,CAAa,CAACC,OAAD,EAAUC,CAAV,kBAAgB,QAAC,OAAD;AAAiB,QAAA,OAAO,EAAED;AAA1B,SAAcC,CAAd;AAAA;AAAA;AAAA;AAAA,cAA7B,CAAH,GAAwE,IAFlF,eAGA;AAAK,QAAA,GAAG,EAAEX;AAAV;AAAA;AAAA;AAAA;AAAA,cAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAxBD;;AA0BA,eAAeH,QAAf;;AAEA,MAAMe,OAAO,GAAG,CAAC;AAAEF,EAAAA,OAAO,EAAE;AAAEG,IAAAA,IAAF;AAAQC,IAAAA;AAAR;AAAX,CAAD,KAA+C;AAE7D,sBACM;AAAK,IAAA,SAAS,EAAIA,mBAAD,GAAuB,uBAAvB,GAAiD,0BAAlE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BAEE;AAAG,QAAA,SAAS,EAAC,aAAb;AAAA,kBAA4BD,IAAI,CAACH;AAAjC;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADN;AAQE,CAVJ;;AAYA,MAAMK,aAAa,GAAG,CAAC;AAACL,EAAAA;AAAD,CAAD,KAAe;AAEnC,sBACM;AAAK,IAAA,SAAS,EAAIA,OAAO,CAACM,MAAR,KAAmB,SAApB,GAAgC,uBAAhC,GAA0D,0BAA3E;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BAEE;AAAG,QAAA,SAAS,EAAC,aAAb;AAAA,kBAA4BN,OAAO,CAACA;AAApC;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADN;AAQE,CAVJ","sourcesContent":["import React,{useRef, useEffect} from 'react';\r\n\r\n\r\n\r\nconst Messages = ({ messages, storedMessages }) => {\r\n  const messagesEndRef = useRef(null);\r\n  useEffect( ()=> {\r\n\t  if(messagesEndRef !== null){\r\n        if(messagesEndRef !== null){\r\n          let timer = setTimeout(() => {\r\n            if(messagesEndRef.current){\r\n              messagesEndRef.current.scrollIntoView({ behavior: \"smooth\", block:\"nearest\", inline:\"start\" });\r\n            }\r\n      \t\t}, 200);\r\n      \t\treturn () => clearTimeout(timer);\r\n\t  \t  }\r\n\t  }\r\n  }, [messages]);\r\n  return(\r\n    <div  className=\"content\">\r\n     \r\n      <div className=\"messages\">\r\n      { storedMessages ? storedMessages.map((message, i) => <StoredMessage key={i} message={message}/>) : null }\r\n      { messages ? messages.map((message, i) => <Message key={i} message={message}/>) : null }\r\n      <div ref={messagesEndRef} />\r\n    </div>\r\n  </div>\r\n  ) \r\n};\r\n\r\nexport default Messages;\r\n\r\nconst Message = ({ message: { data, isSentByCurrentUser }}) => {\r\n  \r\n  return(\r\n        <div className={ (isSentByCurrentUser)? \"messageContainer sent\" : \"messageContainer replies\"}>\r\n          <div className=\"message\">\r\n            {/* <p className=\"messageName\">{ isSentByCurrentUser? \"Moi\" : data.sentBy}</p> */}\r\n            <p className=\"messageText\">{data.message}</p>\r\n          </div>\r\n            \r\n        </div>    \r\n  )}\r\n\r\nconst StoredMessage = ({message}) => {\r\n  \r\n  return(\r\n        <div className={ (message.sentTo === \"medecin\")? \"messageContainer sent\" : \"messageContainer replies\"}>\r\n          <div className=\"message\">\r\n            {/* <p className=\"messageName\">{ isSentByCurrentUser? \"Moi\" : data.sentBy}</p> */}\r\n            <p className=\"messageText\">{message.message}</p>\r\n          </div>\r\n            \r\n        </div>    \r\n  )}\r\n\r\n"]},"metadata":{},"sourceType":"module"}