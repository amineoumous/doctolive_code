{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport moment from 'moment'; // import Cookies from 'js-cookie'\n// import content from './../../Content'\n// let lang = Cookies.get('lang')\n// lang = (lang === undefined)? \"fr\" : lang\n\nexport default class Countdown extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      days: undefined,\n      hours: undefined,\n      minutes: undefined,\n      seconds: undefined,\n      difference: this.props.difference\n    });\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      if (this.state.difference >= 1000) {\n        let diff = this.state.difference - 1000;\n        const days = moment(diff).format('DDD') - 1;\n        const hours = moment(diff).format('HH');\n        const minutes = moment(diff).format('mm');\n        const seconds = moment(diff).format('s');\n        this.setState({\n          days,\n          hours,\n          minutes,\n          seconds,\n          difference: diff\n        });\n      } else {// clearInterval(this.interval)\n      }\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  render() {\n    const {\n      days,\n      hours,\n      minutes,\n      seconds\n    } = this.state;\n    const daysRadius = mapNumber(days, 30, 0, 0, 360);\n    const hoursRadius = mapNumber(hours, 24, 0, 0, 360);\n    const minutesRadius = mapNumber(minutes, 60, 0, 0, 360);\n    const secondsRadius = mapNumber(seconds, 60, 0, 0, 360);\n\n    if (!seconds) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsxs(\"h2\", {\n        children: [\" La consultation commancera  \", moment.utc(this.props.now + this.props.difference).calendar(), \" \"]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"countdown-wrapper\",\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"countdown-item\",\n          children: [/*#__PURE__*/_jsx(SVGCircle, {\n            radius: daysRadius\n          }), Math.floor(days), /*#__PURE__*/_jsx(\"span\", {\n            children: \" jours \"\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"countdown-item\",\n          children: [/*#__PURE__*/_jsx(SVGCircle, {\n            radius: hoursRadius\n          }), Math.floor(hours), /*#__PURE__*/_jsx(\"span\", {\n            children: \" heurs \"\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"countdown-item\",\n          children: [/*#__PURE__*/_jsx(SVGCircle, {\n            radius: minutesRadius\n          }), Math.floor(minutes), /*#__PURE__*/_jsx(\"span\", {\n            children: \" minutes \"\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"countdown-item\",\n          children: [/*#__PURE__*/_jsx(SVGCircle, {\n            radius: secondsRadius\n          }), seconds, /*#__PURE__*/_jsx(\"span\", {\n            children: \" secondes \"\n          })]\n        })]\n      })]\n    });\n  }\n\n}\n\nfunction mapNumber(number, in_min, in_max, out_min, out_max) {\n  return (number - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n\nconst SVGCircle = ({\n  radius\n}) => /*#__PURE__*/_jsx(\"svg\", {\n  className: \"countdown-svg\",\n  children: /*#__PURE__*/_jsx(\"path\", {\n    fill: \"none\",\n    stroke: \"#333\",\n    strokeWidth: \"4\",\n    d: describeArc(50, 50, 48, 0, radius)\n  })\n});\n\nfunction polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n  var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n  return {\n    x: centerX + radius * Math.cos(angleInRadians),\n    y: centerY + radius * Math.sin(angleInRadians)\n  };\n}\n\nfunction describeArc(x, y, radius, startAngle, endAngle) {\n  var start = polarToCartesian(x, y, radius, endAngle);\n  var end = polarToCartesian(x, y, radius, startAngle);\n  var largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n  var d = ['M', start.x, start.y, 'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y].join(' ');\n  return d;\n}","map":null,"metadata":{},"sourceType":"module"}