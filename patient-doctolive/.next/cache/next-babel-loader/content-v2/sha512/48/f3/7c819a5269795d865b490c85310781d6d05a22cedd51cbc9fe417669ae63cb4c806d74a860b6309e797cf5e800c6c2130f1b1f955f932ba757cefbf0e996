{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react'; // import Config from 'Config'\n\nimport Config from './../../EndPoint';\nimport Card from './../../components/Card/Card';\nimport CardBody from './../../components/Card/CardBody';\nimport { Col, Row, Alert, Collapse } from 'react-bootstrap';\nimport DocumentC from './../../components/Documents/DocumentsC';\nimport Messages from './../../components/Chat/messages';\nimport InfoBar from './../../components/Chat/infoBar';\nimport VideoCall from './../../components/Chat/videoChat';\nimport SendMessageForm from './../../components/Chat/sendingMessage';\nimport CountDown from './../../components/Chat/CountDown/CountDown';\nimport Button from './../../components/CustomButtons/Button';\nimport Checkbox from './../../components/Checkbox/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport { useRouter } from 'next/router';\nimport { useAuth } from './../../context/AuthContext';\nimport contentFR from './../../contentFR';\nimport contentEN from './../../contentEN';\nimport contentAR from './../../contentAR'; // export async function getServerSideProps(context) {\n//     const res = await fetch(`${Config.BACKEND_URL}/consultation/${context.params.id}`)\n//     const data = await res.json();\n//     console.log(data)\n//     if(!data){\n//         return {\n//             props: {teleconsultation: {}},\n//           }\n//     }\n//     return {\n//       props: {teleconsultation: data.consultation},\n//     }\n// }\n\nexport async function getServerSideProps(context) {\n  const {\n    req\n  } = context;\n  const cookies = getAppCookies(req);\n\n  if (!cookies.token) {\n    return {\n      props: {\n        isAuth: false\n      }\n    };\n  } else {\n    const res = await fetch(`${Config.BACKEND_URL}/consultation/${context.params.id}`, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `token ${cookies.token}`\n      }\n    });\n    const data = await res.json();\n    return {\n      props: {\n        isAuth: true,\n        teleconsultation: data.consultation\n      }\n    };\n  }\n}\n\nfunction getAppCookies(req) {\n  const parsedItems = {};\n\n  if (req.headers.cookie) {\n    const cookiesItems = req.headers.cookie.split('; ');\n    cookiesItems.forEach(cookies => {\n      const parsedItem = cookies.split('=');\n      parsedItems[parsedItem[0]] = decodeURI(parsedItem[1]);\n    });\n  }\n\n  return parsedItems;\n}\n\nexport default function ConsultationContainer({\n  teleconsultation,\n  socket\n}) {\n  const {\n    0: addRapport,\n    1: setAddRapport\n  } = useState(false);\n  const {\n    0: fieldValidationErrors,\n    1: setFieldValidationErrors\n  } = useState({});\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    isCompleted: false\n  });\n  const {\n    0: response,\n    1: setResponse\n  } = useState({\n    sending: false,\n    success: false,\n    donneIncorecte: false\n  });\n  const router = useRouter();\n  const {\n    locale\n  } = router;\n  const content = locale === \"ar\" ? contentAR : locale === \"en\" ? contentEN : contentFR;\n  const {\n    userData\n  } = useAuth();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setResponse(old => {\n      return _objectSpread(_objectSpread({}, old), {}, {\n        sending: true\n      });\n    });\n    let data = state;\n    fetch(`${Config.BACKEND_URL}/feedback`, {\n      method: \"post\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `token ${userData.token}`\n      },\n      body: JSON.stringify(_objectSpread(_objectSpread({}, data), {}, {\n        consultationId: teleconsultation.id\n      }))\n    }).then(r => r.json().then(res => {\n      if (!res.error) {\n        // props.setUserData(res);\n        setResponse({\n          sending: false,\n          success: true,\n          donneIncorecte: false\n        });\n      } else {\n        setResponse({\n          sending: false,\n          success: false,\n          donneIncorecte: true\n        });\n\n        if (res.validator) {} else {}\n      }\n    })).catch(error => {\n      console.log(error);\n      setResponse({\n        sending: false,\n        success: false,\n        donneIncorecte: true\n      });\n    });\n  };\n\n  const validateField = () => {};\n\n  const handleChange = ({\n    target: {\n      value,\n      name\n    }\n  }) => {\n    if (name === \"isCompleted\") {\n      setState(old => {\n        return _objectSpread(_objectSpread({}, old), {}, {\n          isCompleted: !state.isCompleted\n        });\n      });\n    } else {\n      setState(old => {\n        return _objectSpread(_objectSpread({}, old), {}, {\n          [name]: value\n        });\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"teleconsultation\",\n    children: /*#__PURE__*/_jsxs(Row, {\n      className: \"m-0\",\n      children: [/*#__PURE__*/_jsx(Col, {\n        lg: \"6\",\n        md: 12,\n        sm: 12,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(ChatContainer, {\n          teleconsultation: teleconsultation,\n          socket: socket\n        })\n      }), /*#__PURE__*/_jsxs(Col, {\n        lg: \"6\",\n        md: 12,\n        sm: 12,\n        xs: 12,\n        children: [/*#__PURE__*/_jsx(Card, {\n          children: /*#__PURE__*/_jsx(CardBody, {\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              children: [/*#__PURE__*/_jsx(\"strong\", {\n                children: \" Document \\xE0 partager dans cette consultation \"\n              }), /*#__PURE__*/_jsx(DocumentC, {\n                documents: teleconsultation ? teleconsultation.documents : [],\n                socket: socket,\n                consultation: teleconsultation\n              })]\n            })\n          })\n        }), /*#__PURE__*/_jsx(Card, {\n          children: /*#__PURE__*/_jsx(CardBody, {\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              children: [/*#__PURE__*/_jsx(\"strong\", {\n                children: \" Ajouter un rapport  \"\n              }), addRapport ? /*#__PURE__*/_jsx(\"div\", {\n                children: /*#__PURE__*/_jsxs(\"form\", {\n                  onSubmit: handleSubmit,\n                  autoComplete: \"off\",\n                  children: [/*#__PURE__*/_jsxs(Row, {\n                    children: [/*#__PURE__*/_jsx(Col, {\n                      xs: \"12\",\n                      md: \"6\",\n                      className: \"mt-3\",\n                      children: /*#__PURE__*/_jsx(TextField, {\n                        error: fieldValidationErrors.nomError,\n                        placeholder: \"\",\n                        label: content.report.labelNom,\n                        required: false,\n                        variant: \"outlined\",\n                        name: \"type\",\n                        onBlur: validateField,\n                        value: state.nom,\n                        onChange: handleChange\n                      })\n                    }), /*#__PURE__*/_jsx(Col, {\n                      xs: \"12\",\n                      md: \"12\",\n                      className: \"mt-3\",\n                      children: /*#__PURE__*/_jsx(TextField, {\n                        placeholder: \"\",\n                        variant: \"outlined\",\n                        required: false,\n                        error: fieldValidationErrors.prenomError,\n                        label: content.report.labelPrenom,\n                        onBlur: validateField,\n                        name: \"description\",\n                        fullWidth: true,\n                        value: state.description,\n                        onChange: handleChange\n                      })\n                    }), /*#__PURE__*/_jsx(Col, {\n                      xs: \"12\",\n                      md: \"6\",\n                      className: \"mt-3\",\n                      children: /*#__PURE__*/_jsx(Checkbox, {\n                        placeholder: \"\",\n                        variant: \"outlined\",\n                        required: false,\n                        error: fieldValidationErrors.prenomError,\n                        label: content.report.labelEnd,\n                        name: \"isCompleted\",\n                        checked: state.isCompleted,\n                        rtl: locale === \"ar\" ? true : false,\n                        onChange: handleChange\n                      })\n                    })]\n                  }), /*#__PURE__*/_jsx(Row, {\n                    className: \"justify-content-center\",\n                    children: /*#__PURE__*/_jsx(Collapse, {\n                      in: response.donneIncorecte,\n                      children: /*#__PURE__*/_jsx(\"div\", {\n                        className: \"mt-5\",\n                        children: /*#__PURE__*/_jsx(Alert, {\n                          variant: \"danger\",\n                          children: content.report.errorSignup\n                        })\n                      })\n                    })\n                  }), /*#__PURE__*/_jsx(Row, {\n                    className: \"justify-content-center\",\n                    children: /*#__PURE__*/_jsx(Collapse, {\n                      in: response.success,\n                      children: /*#__PURE__*/_jsx(\"div\", {\n                        className: \"mt-5\",\n                        children: /*#__PURE__*/_jsx(Alert, {\n                          variant: \"success\",\n                          children: content.report.successSignup\n                        })\n                      })\n                    })\n                  }), /*#__PURE__*/_jsx(Row, {\n                    className: \"align-items-center justify-content-around mt-4 \",\n                    children: /*#__PURE__*/_jsxs(Button, {\n                      type: \"submit\",\n                      color: \"primary\",\n                      children: [\" \", content.report.signup, \" \"]\n                    })\n                  })]\n                })\n              }) : /*#__PURE__*/_jsx(\"div\", {\n                children: /*#__PURE__*/_jsx(Button, {\n                  color: \"primary\",\n                  onClick: () => setAddRapport(true),\n                  children: \" Ajouter rapport \"\n                })\n              })]\n            })\n          })\n        })]\n      })]\n    })\n  });\n}\n\nfunction ChatContainer(props) {\n  const {\n    0: onConsuting,\n    1: setonConsuting\n  } = useState(false);\n  const {\n    0: onCalling,\n    1: setonCalling\n  } = useState(false);\n  const {\n    0: difference,\n    1: setdifference\n  } = useState(0);\n  const {\n    0: now,\n    1: setnow\n  } = useState(0);\n  useEffect(() => {\n    if (props.socket) {\n      props.socket.on(\"call-entring\", () => {\n        setonCalling(true);\n      });\n      props.socket.emit('check-time', {\n        consultationId: props.teleconsultation.id\n      }, response => {\n        setdifference(response.diff);\n        setnow(response.now);\n        setonConsuting(response.isTime);\n      });\n    }\n  }, [props.socket]);\n  return /*#__PURE__*/_jsx(\"div\", {\n    children: props.teleconsultation ? /*#__PURE__*/_jsx(Row, {\n      className: \"justify-content-around m-0\",\n      children: /*#__PURE__*/_jsxs(Col, {\n        lg: \"12\",\n        className: \"bg-white p-0 discussion-container\",\n        children: [/*#__PURE__*/_jsx(Row, {\n          className: \"m-0\",\n          children: /*#__PURE__*/_jsx(InfoBar, {\n            onConsuting: onConsuting,\n            medecin: props.teleconsultation.medecin,\n            teleconsultation: props.teleconsultation\n          })\n        }), /*#__PURE__*/_jsx(Row, {\n          className: \"discussion m-0\",\n          children: /*#__PURE__*/_jsx(ProcessZone, _objectSpread({\n            onConsuting: onConsuting,\n            medecin: props.teleconsultation.medecin,\n            difference: difference,\n            now: now,\n            setonCalling: setonCalling,\n            onCalling: onCalling\n          }, props))\n        })]\n      })\n    }) : null\n  });\n}\n\nfunction ProcessZone(props) {\n  useEffect(() => {\n    if (navigator) {\n      if (navigator.permissions) {\n        navigator.permissions.query({\n          name: \"camera\"\n        }).then(res => console.log(res), e => console.log(e.name + \": \" + e.message)).catch(err => {\n          console.log(e.name + \": \" + e.message);\n        });\n        navigator.permissions.query({\n          name: \"microphone\"\n        }).then(({\n          state\n        }) => console.log(state), e => console.log(e.name + \": \" + e.message)); // navigator.mediaDevices.enumerateDevices()\n        // .then(devices => {\n        //     const filtered = devices.filter(device => device.kind === 'videoinput');\n        //     // console.log('Cameras found', filtered)\n        //     // callback(filtered);\n        // })\n        // .catch(err=> {\n        //     console.log(`Unable to fetsh stream ${err}`)\n        // })\n      }\n    }\n\n    return () => {};\n  }, []);\n\n  if (props.onCalling) {\n    return /*#__PURE__*/_jsx(VideoCall, _objectSpread({}, props));\n  }\n\n  if (props.onConsuting) {\n    return /*#__PURE__*/_jsx(Chat, _objectSpread({}, props));\n  }\n\n  switch (true) {\n    case props.difference > 0:\n      return /*#__PURE__*/_jsx(FutureConsultation, {\n        difference: props.difference,\n        now: props.now\n      });\n\n    case props.difference < 0:\n      return /*#__PURE__*/_jsx(OldConsultation, {});\n\n    default:\n      return /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(\"p\", {\n          children: \" Nous avons pas pus d\\xE9duire le cr\\xE9neau de cette consultation. Veillez rafr\\xE9chir la page pour r\\xE9ssayer \"\n        })\n      });\n  }\n}\n\nfunction Chat(props) {\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]);\n  const {\n    0: message,\n    1: setMessage\n  } = useState(\"\");\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      setMessage('');\n      let data = {\n        message: message,\n        type: \"text\",\n        sentBy: \"patient\",\n        sentTo: \"medecin\",\n        selectedUser: \"m\" + props.medecin.id,\n        consultationId: props.teleconsultation.id\n      };\n      setMessages(messages => [...messages, {\n        isSentByCurrentUser: true,\n        data\n      }]);\n      props.socket.emit('sendMessage', data, () => {});\n    }\n  };\n\n  useEffect(() => {\n    if (props.socket) {\n      props.socket.on('message', message => {\n        setMessages(messages => [...messages, message]);\n      });\n    }\n\n    return () => {\n      if (props.socket) {\n        props.socket.removeAllListeners('message');\n      }\n    };\n  }, [props.socket]);\n  return /*#__PURE__*/_jsxs(Col, {\n    lg: \"12\",\n    md: \"12\",\n    sm: \"12\",\n    xs: \"12\",\n    className: \"chat-messages p-0\",\n    children: [/*#__PURE__*/_jsx(Messages, {\n      messages: messages,\n      user: props.medecin,\n      storedMessages: props.teleconsultation.messages\n    }), /*#__PURE__*/_jsx(SendMessageForm, {\n      message: message,\n      setMessage: setMessage,\n      sendMessage: sendMessage,\n      active: props.teleconsultation.active\n    })]\n  });\n}\n\nfunction FutureConsultation({\n  difference,\n  now\n}) {\n  return /*#__PURE__*/_jsx(Col, {\n    lg: \"12\",\n    md: \"12\",\n    sm: \"12\",\n    xs: \"12\",\n    className: \"chat-messages p-5\",\n    children: /*#__PURE__*/_jsx(Row, {\n      className: \"justify-content-center align-items-center h-100\",\n      children: /*#__PURE__*/_jsx(CountDown, {\n        difference: difference,\n        now: now\n      })\n    })\n  });\n}\n\nfunction OldConsultation(props) {\n  return /*#__PURE__*/_jsx(Col, {\n    lg: \"12\",\n    md: \"12\",\n    sm: \"12\",\n    xs: \"12\",\n    className: \"chat-messages p-0\",\n    children: /*#__PURE__*/_jsx(Row, {\n      className: \"justify-content-center align-items-center h-100\",\n      children: /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(\"h2\", {\n          children: \" consultation passer \"\n        })\n      })\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}