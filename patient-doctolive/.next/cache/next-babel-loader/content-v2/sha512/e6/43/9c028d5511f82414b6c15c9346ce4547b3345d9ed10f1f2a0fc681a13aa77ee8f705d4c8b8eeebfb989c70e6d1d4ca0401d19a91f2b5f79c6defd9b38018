{"ast":null,"code":"var MomentLangue = {\n  fr: {\n    invalidDate: \"Date non précisée\",\n    months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),\n    monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),\n    monthsParseExact: true,\n    weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),\n    weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),\n    weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),\n    weekdaysParseExact: true,\n    longDateFormat: {\n      LT: 'HH:mm',\n      LTS: 'HH:mm:ss',\n      L: 'DD/MM/YYYY',\n      LL: 'D MMMM YYYY',\n      LLL: 'D MMMM YYYY à HH:mm',\n      LLLL: 'dddd D MMMM YYYY HH:mm'\n    },\n    calendar: {\n      sameDay: '[Aujourd’hui à] LT',\n      nextDay: '[Demain à] LT',\n      nextWeek: 'dddd [à] LT',\n      lastDay: '[Hier à] LT',\n      lastWeek: 'dddd [dernier à] LT',\n      sameElse: 'LLL'\n    },\n    relativeTime: {\n      future: 'dans %s',\n      past: 'il y a %s',\n      s: 'quelques secondes',\n      m: 'une minute',\n      mm: '%d minutes',\n      h: 'une heure',\n      hh: '%d heures',\n      d: 'un jour',\n      dd: '%d jours',\n      M: 'un mois',\n      MM: '%d mois',\n      y: 'un an',\n      yy: '%d ans'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}(er|e)/,\n    ordinal: function ordinal(number) {\n      return number + (number === 1 ? 'er' : 'e');\n    },\n    meridiemParse: /PD|MD/,\n    isPM: function isPM(input) {\n      return input.charAt(0) === 'M';\n    },\n    // In case the meridiem units are not separated around 12, then implement\n    // this function (look at locale/id.js for an example).\n    // meridiemHour : function (hour, meridiem) {\n    //     return /* 0-23 hour, given meridiem token and hour 1-12 */ ;\n    // },\n    meridiem: function meridiem(hours, minutes, isLower) {\n      return hours < 12 ? 'PD' : 'MD';\n    },\n    week: {\n      dow: 1,\n      // Monday is the first day of the week.\n      doy: 4 // Used to determine first week of the year.\n\n    }\n  },\n  ma: {\n    invalidDate: \"تاريخ غير محدد\",\n    months: [\"يناير\", \"فبراير\", \"مارس\", \"ابريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\"],\n    monthsShort: [\"يناير\", \"فبراير\", \"مارس\", \"ابريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\"],\n    monthsParseExact: true,\n    weekdays: [\"َالأَحَدِ\", \"الاثْنَيْنِ\", \"الثُّلاَثَاءِ\", \"الأَرْبِعَاءِ\", \"الْخَمِيسِ\", \"الْجُمُعَةِ\", \"السَّبْتِ\"],\n    weekdaysShort: [\"َالأَحَدِ\", \"الاثْنَيْنِ\", \"الثُّلاَثَاءِ\", \"الأَرْبِعَاءِ\", \"الْخَمِيسِ\", \"الْجُمُعَةِ\", \"السَّبْتِ\"],\n    weekdaysMin: [\"َالأَحَدِ\", \"الاثْنَيْنِ\", \"الثُّلاَثَاءِ\", \"الأَرْبِعَاءِ\", \"الْخَمِيسِ\", \"الْجُمُعَةِ\", \"السَّبْتِ\"],\n    weekdaysParseExact: true,\n    longDateFormat: {\n      LT: 'HH:mm',\n      LTS: 'HH:mm:ss',\n      L: 'DD/MM/YYYY',\n      LL: 'D MMMM YYYY',\n      LLL: 'dddd D MMMM YYYY على الساعة HH:mm',\n      LLLL: 'dddd D MMMM YYYY HH:mm'\n    },\n    calendar: {\n      sameDay: '[اليوم على الساعة] LT',\n      nextDay: '[غدا على الساعة] LT',\n      nextWeek: 'dddd [على الساعة] LT',\n      lastDay: '[الامس على الساعة] LT',\n      lastWeek: 'dddd [الماضي على الساعة] LT',\n      sameElse: 'LLL'\n    },\n    relativeTime: {\n      future: 'خلال %s',\n      past: 'قبل %s',\n      s: 'غضون ثواني',\n      m: 'دقيقة',\n      mm: '%d دقائق',\n      h: 'ساعة',\n      hh: '%d ساعات',\n      d: 'يوم',\n      dd: '%d أَيَّام',\n      M: 'أَيَّام',\n      MM: '%d شهور',\n      y: 'سنة',\n      yy: '%d سنوات'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}(er|e)/,\n    ordinal: function ordinal(number) {\n      return number + (number === 1 ? 'er' : 'e');\n    },\n    meridiemParse: /PD|MD/,\n    isPM: function isPM(input) {\n      return input.charAt(0) === 'M';\n    },\n    // In case the meridiem units are not separated around 12, then implement\n    // this function (look at locale/id.js for an example).\n    // meridiemHour : function (hour, meridiem) {\n    //     return /* 0-23 hour, given meridiem token and hour 1-12 */ ;\n    // },\n    meridiem: function meridiem(hours, minutes, isLower) {\n      return hours < 12 ? 'PD' : 'MD';\n    },\n    week: {\n      dow: 1,\n      // Monday is the first day of the week.\n      doy: 4 // Used to determine first week of the year.\n\n    }\n  },\n  en: {\n    invalidDate: \"Invalide date\",\n    months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),\n    monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),\n    weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),\n    weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\n    weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_')\n  }\n};\nexport default MomentLangue;","map":{"version":3,"sources":["C:/Users/CARRE/Documents/GitHub/doctolive_code/patient-doctolive/components/MomentLangu.js"],"names":["MomentLangue","fr","invalidDate","months","split","monthsShort","monthsParseExact","weekdays","weekdaysShort","weekdaysMin","weekdaysParseExact","longDateFormat","LT","LTS","L","LL","LLL","LLLL","calendar","sameDay","nextDay","nextWeek","lastDay","lastWeek","sameElse","relativeTime","future","past","s","m","mm","h","hh","d","dd","M","MM","y","yy","dayOfMonthOrdinalParse","ordinal","number","meridiemParse","isPM","input","charAt","meridiem","hours","minutes","isLower","week","dow","doy","ma","en"],"mappings":"AAAA,IAAIA,YAAY,GAAE;AACdC,EAAAA,EAAE,EAAE;AACJC,IAAAA,WAAW,EAAG,mBADV;AAEJC,IAAAA,MAAM,EAAG,uFAAuFC,KAAvF,CAA6F,GAA7F,CAFL;AAGJC,IAAAA,WAAW,EAAG,iEAAiED,KAAjE,CAAuE,GAAvE,CAHV;AAIJE,IAAAA,gBAAgB,EAAG,IAJf;AAKJC,IAAAA,QAAQ,EAAG,sDAAsDH,KAAtD,CAA4D,GAA5D,CALP;AAMJI,IAAAA,aAAa,EAAG,qCAAqCJ,KAArC,CAA2C,GAA3C,CANZ;AAOJK,IAAAA,WAAW,EAAG,uBAAuBL,KAAvB,CAA6B,GAA7B,CAPV;AAQJM,IAAAA,kBAAkB,EAAG,IARjB;AASJC,IAAAA,cAAc,EAAG;AACdC,MAAAA,EAAE,EAAG,OADS;AAEdC,MAAAA,GAAG,EAAG,UAFQ;AAGdC,MAAAA,CAAC,EAAG,YAHU;AAIdC,MAAAA,EAAE,EAAG,aAJS;AAKdC,MAAAA,GAAG,EAAG,qBALQ;AAMdC,MAAAA,IAAI,EAAG;AANO,KATb;AAiBLC,IAAAA,QAAQ,EAAG;AACPC,MAAAA,OAAO,EAAG,oBADH;AAEPC,MAAAA,OAAO,EAAG,eAFH;AAGPC,MAAAA,QAAQ,EAAG,aAHJ;AAIPC,MAAAA,OAAO,EAAG,aAJH;AAKPC,MAAAA,QAAQ,EAAG,qBALJ;AAMPC,MAAAA,QAAQ,EAAG;AANJ,KAjBN;AAyBLC,IAAAA,YAAY,EAAG;AACXC,MAAAA,MAAM,EAAG,SADE;AAEXC,MAAAA,IAAI,EAAG,WAFI;AAGXC,MAAAA,CAAC,EAAG,mBAHO;AAIXC,MAAAA,CAAC,EAAG,YAJO;AAKXC,MAAAA,EAAE,EAAG,YALM;AAMXC,MAAAA,CAAC,EAAG,WANO;AAOXC,MAAAA,EAAE,EAAG,WAPM;AAQXC,MAAAA,CAAC,EAAG,SARO;AASXC,MAAAA,EAAE,EAAG,UATM;AAUXC,MAAAA,CAAC,EAAG,SAVO;AAWXC,MAAAA,EAAE,EAAG,SAXM;AAYXC,MAAAA,CAAC,EAAG,OAZO;AAaXC,MAAAA,EAAE,EAAG;AAbM,KAzBV;AAwCLC,IAAAA,sBAAsB,EAAG,eAxCpB;AAyCLC,IAAAA,OAAO,EAAG,iBAAUC,MAAV,EAAkB;AACxB,aAAOA,MAAM,IAAIA,MAAM,KAAK,CAAX,GAAe,IAAf,GAAsB,GAA1B,CAAb;AACH,KA3CI;AA4CLC,IAAAA,aAAa,EAAG,OA5CX;AA6CLC,IAAAA,IAAI,EAAG,cAAUC,KAAV,EAAiB;AACpB,aAAOA,KAAK,CAACC,MAAN,CAAa,CAAb,MAAoB,GAA3B;AACH,KA/CI;AAgDL;AACA;AACA;AACA;AACA;AACAC,IAAAA,QAAQ,EAAG,kBAAUC,KAAV,EAAiBC,OAAjB,EAA0BC,OAA1B,EAAmC;AAC1C,aAAOF,KAAK,GAAG,EAAR,GAAa,IAAb,GAAoB,IAA3B;AACH,KAvDI;AAwDLG,IAAAA,IAAI,EAAG;AACHC,MAAAA,GAAG,EAAG,CADH;AACM;AACTC,MAAAA,GAAG,EAAG,CAFH,CAEM;;AAFN;AAxDF,GADU;AA8DlBC,EAAAA,EAAE,EAAG;AACFnD,IAAAA,WAAW,EAAG,gBADZ;AAEFC,IAAAA,MAAM,EAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,MAApB,EAA4B,OAA5B,EAAqC,MAArC,EAA6C,OAA7C,EAAsD,OAAtD,EAA+D,OAA/D,EAAwE,QAAxE,EAAkF,QAAlF,EAA4F,QAA5F,EAAqG,QAArG,CAFP;AAGFE,IAAAA,WAAW,EAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,MAApB,EAA4B,OAA5B,EAAqC,MAArC,EAA6C,OAA7C,EAAsD,OAAtD,EAA+D,OAA/D,EAAwE,QAAxE,EAAkF,QAAlF,EAA4F,QAA5F,EAAqG,QAArG,CAHZ;AAIFC,IAAAA,gBAAgB,EAAG,IAJjB;AAKFC,IAAAA,QAAQ,EAAI,CAAC,WAAD,EAAa,aAAb,EAA2B,eAA3B,EAA2C,eAA3C,EAA4D,YAA5D,EAAyE,aAAzE,EAAwF,WAAxF,CALV;AAMFC,IAAAA,aAAa,EAAG,CAAC,WAAD,EAAa,aAAb,EAA2B,eAA3B,EAA2C,eAA3C,EAA4D,YAA5D,EAAyE,aAAzE,EAAwF,WAAxF,CANd;AAOFC,IAAAA,WAAW,EAAG,CAAC,WAAD,EAAa,aAAb,EAA2B,eAA3B,EAA2C,eAA3C,EAA4D,YAA5D,EAAyE,aAAzE,EAAwF,WAAxF,CAPZ;AAQFC,IAAAA,kBAAkB,EAAG,IARnB;AASFC,IAAAA,cAAc,EAAG;AACbC,MAAAA,EAAE,EAAG,OADQ;AAEbC,MAAAA,GAAG,EAAG,UAFO;AAGbC,MAAAA,CAAC,EAAG,YAHS;AAIbC,MAAAA,EAAE,EAAG,aAJQ;AAKbC,MAAAA,GAAG,EAAG,mCALO;AAMbC,MAAAA,IAAI,EAAG;AANM,KATf;AAiBFC,IAAAA,QAAQ,EAAG;AACPC,MAAAA,OAAO,EAAG,uBADH;AAEPC,MAAAA,OAAO,EAAG,qBAFH;AAGPC,MAAAA,QAAQ,EAAG,sBAHJ;AAIPC,MAAAA,OAAO,EAAG,uBAJH;AAKPC,MAAAA,QAAQ,EAAG,6BALJ;AAMPC,MAAAA,QAAQ,EAAG;AANJ,KAjBT;AAyBFC,IAAAA,YAAY,EAAG;AACXC,MAAAA,MAAM,EAAG,SADE;AAEXC,MAAAA,IAAI,EAAG,QAFI;AAGXC,MAAAA,CAAC,EAAG,YAHO;AAIXC,MAAAA,CAAC,EAAG,OAJO;AAKXC,MAAAA,EAAE,EAAG,UALM;AAMXC,MAAAA,CAAC,EAAG,MANO;AAOXC,MAAAA,EAAE,EAAG,UAPM;AAQXC,MAAAA,CAAC,EAAG,KARO;AASXC,MAAAA,EAAE,EAAG,YATM;AAUXC,MAAAA,CAAC,EAAG,SAVO;AAWXC,MAAAA,EAAE,EAAG,SAXM;AAYXC,MAAAA,CAAC,EAAG,KAZO;AAaXC,MAAAA,EAAE,EAAG;AAbM,KAzBb;AAwCFC,IAAAA,sBAAsB,EAAG,eAxCvB;AAyCFC,IAAAA,OAAO,EAAG,iBAAUC,MAAV,EAAkB;AACxB,aAAOA,MAAM,IAAIA,MAAM,KAAK,CAAX,GAAe,IAAf,GAAsB,GAA1B,CAAb;AACH,KA3CC;AA4CFC,IAAAA,aAAa,EAAG,OA5Cd;AA6CFC,IAAAA,IAAI,EAAG,cAAUC,KAAV,EAAiB;AACpB,aAAOA,KAAK,CAACC,MAAN,CAAa,CAAb,MAAoB,GAA3B;AACH,KA/CC;AAgDF;AACA;AACA;AACA;AACA;AACAC,IAAAA,QAAQ,EAAG,kBAAUC,KAAV,EAAiBC,OAAjB,EAA0BC,OAA1B,EAAmC;AAC1C,aAAOF,KAAK,GAAG,EAAR,GAAa,IAAb,GAAoB,IAA3B;AACH,KAvDC;AAwDFG,IAAAA,IAAI,EAAG;AACHC,MAAAA,GAAG,EAAG,CADH;AACM;AACTC,MAAAA,GAAG,EAAG,CAFH,CAEM;;AAFN;AAxDL,GA9Da;AA2HlBE,EAAAA,EAAE,EAAC;AACCpD,IAAAA,WAAW,EAAG,eADf;AAGCC,IAAAA,MAAM,EAAG,wFAAwFC,KAAxF,CAA8F,GAA9F,CAHV;AAICC,IAAAA,WAAW,EAAG,kDAAkDD,KAAlD,CAAwD,GAAxD,CAJf;AAKCG,IAAAA,QAAQ,EAAG,2DAA2DH,KAA3D,CAAiE,GAAjE,CALZ;AAMCI,IAAAA,aAAa,EAAG,8BAA8BJ,KAA9B,CAAoC,GAApC,CANjB;AAOCK,IAAAA,WAAW,EAAG,uBAAuBL,KAAvB,CAA6B,GAA7B;AAPf;AA3He,CAAlB;AAuIA,eAAeJ,YAAf","sourcesContent":["let MomentLangue ={\r\n    fr: {\r\n    invalidDate : \"Date non précisée\",\r\n    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),\r\n    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),\r\n    monthsParseExact : true,\r\n    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),\r\n    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),\r\n    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),\r\n    weekdaysParseExact : true,\r\n    longDateFormat : {\r\n       LT : 'HH:mm',\r\n       LTS : 'HH:mm:ss',\r\n       L : 'DD/MM/YYYY',\r\n       LL : 'D MMMM YYYY',\r\n       LLL : 'D MMMM YYYY à HH:mm',\r\n       LLLL : 'dddd D MMMM YYYY HH:mm'\r\n   },\r\n   calendar : {\r\n       sameDay : '[Aujourd’hui à] LT',\r\n       nextDay : '[Demain à] LT',\r\n       nextWeek : 'dddd [à] LT',\r\n       lastDay : '[Hier à] LT',\r\n       lastWeek : 'dddd [dernier à] LT',\r\n       sameElse : 'LLL'\r\n   },\r\n   relativeTime : {\r\n       future : 'dans %s',\r\n       past : 'il y a %s',\r\n       s : 'quelques secondes',\r\n       m : 'une minute',\r\n       mm : '%d minutes',\r\n       h : 'une heure',\r\n       hh : '%d heures',\r\n       d : 'un jour',\r\n       dd : '%d jours',\r\n       M : 'un mois',\r\n       MM : '%d mois',\r\n       y : 'un an',\r\n       yy : '%d ans'\r\n   },\r\n   dayOfMonthOrdinalParse : /\\d{1,2}(er|e)/,\r\n   ordinal : function (number) {\r\n       return number + (number === 1 ? 'er' : 'e');\r\n   },\r\n   meridiemParse : /PD|MD/,\r\n   isPM : function (input) {\r\n       return input.charAt(0) === 'M';\r\n   },\r\n   // In case the meridiem units are not separated around 12, then implement\r\n   // this function (look at locale/id.js for an example).\r\n   // meridiemHour : function (hour, meridiem) {\r\n   //     return /* 0-23 hour, given meridiem token and hour 1-12 */ ;\r\n   // },\r\n   meridiem : function (hours, minutes, isLower) {\r\n       return hours < 12 ? 'PD' : 'MD';\r\n   },\r\n   week : {\r\n       dow : 1, // Monday is the first day of the week.\r\n       doy : 4  // Used to determine first week of the year.\r\n   }\r\n},\r\nma:  {\r\n   invalidDate : \"تاريخ غير محدد\",\r\n   months : [\"يناير\" ,\"فبراير\" ,\"مارس\" ,\"ابريل\" ,\"مايو\", \"يونيو\" ,\"يوليو\", \"أغسطس\" ,\"سبتمبر\", \"أكتوبر\", \"نوفمبر\",\"ديسمبر\"],\r\n   monthsShort : [\"يناير\" ,\"فبراير\" ,\"مارس\" ,\"ابريل\" ,\"مايو\", \"يونيو\" ,\"يوليو\", \"أغسطس\" ,\"سبتمبر\", \"أكتوبر\", \"نوفمبر\",\"ديسمبر\"],\r\n   monthsParseExact : true,\r\n   weekdays :  [\"َالأَحَدِ\",\"الاثْنَيْنِ\",\"الثُّلاَثَاءِ\",\"الأَرْبِعَاءِ\" ,\"الْخَمِيسِ\",\"الْجُمُعَةِ\", \"السَّبْتِ\"],\r\n   weekdaysShort : [\"َالأَحَدِ\",\"الاثْنَيْنِ\",\"الثُّلاَثَاءِ\",\"الأَرْبِعَاءِ\" ,\"الْخَمِيسِ\",\"الْجُمُعَةِ\", \"السَّبْتِ\"],\r\n   weekdaysMin : [\"َالأَحَدِ\",\"الاثْنَيْنِ\",\"الثُّلاَثَاءِ\",\"الأَرْبِعَاءِ\" ,\"الْخَمِيسِ\",\"الْجُمُعَةِ\", \"السَّبْتِ\"],\r\n   weekdaysParseExact : true,\r\n   longDateFormat : {\r\n       LT : 'HH:mm',\r\n       LTS : 'HH:mm:ss',\r\n       L : 'DD/MM/YYYY',\r\n       LL : 'D MMMM YYYY',\r\n       LLL : 'dddd D MMMM YYYY على الساعة HH:mm',\r\n       LLLL : 'dddd D MMMM YYYY HH:mm'\r\n   },\r\n   calendar : {\r\n       sameDay : '[اليوم على الساعة] LT',\r\n       nextDay : '[غدا على الساعة] LT',\r\n       nextWeek : 'dddd [على الساعة] LT',\r\n       lastDay : '[الامس على الساعة] LT',\r\n       lastWeek : 'dddd [الماضي على الساعة] LT',\r\n       sameElse : 'LLL'\r\n   },\r\n   relativeTime : {\r\n       future : 'خلال %s',\r\n       past : 'قبل %s',\r\n       s : 'غضون ثواني',\r\n       m : 'دقيقة',\r\n       mm : '%d دقائق',\r\n       h : 'ساعة',\r\n       hh : '%d ساعات',\r\n       d : 'يوم',\r\n       dd : '%d أَيَّام',\r\n       M : 'أَيَّام',\r\n       MM : '%d شهور',\r\n       y : 'سنة',\r\n       yy : '%d سنوات'\r\n   },\r\n   dayOfMonthOrdinalParse : /\\d{1,2}(er|e)/,\r\n   ordinal : function (number) {\r\n       return number + (number === 1 ? 'er' : 'e');\r\n   },\r\n   meridiemParse : /PD|MD/,\r\n   isPM : function (input) {\r\n       return input.charAt(0) === 'M';\r\n   },\r\n   // In case the meridiem units are not separated around 12, then implement\r\n   // this function (look at locale/id.js for an example).\r\n   // meridiemHour : function (hour, meridiem) {\r\n   //     return /* 0-23 hour, given meridiem token and hour 1-12 */ ;\r\n   // },\r\n   meridiem : function (hours, minutes, isLower) {\r\n       return hours < 12 ? 'PD' : 'MD';\r\n   },\r\n   week : {\r\n       dow : 1, // Monday is the first day of the week.\r\n       doy : 4  // Used to determine first week of the year.\r\n   }\r\n},\r\nen:{\r\n    invalidDate : \"Invalide date\",\r\n    \r\n    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),\r\n    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),\r\n    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),\r\n    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\r\n    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),\r\n    \r\n\r\n}\r\n}\r\nexport default MomentLangue"]},"metadata":{},"sourceType":"module"}