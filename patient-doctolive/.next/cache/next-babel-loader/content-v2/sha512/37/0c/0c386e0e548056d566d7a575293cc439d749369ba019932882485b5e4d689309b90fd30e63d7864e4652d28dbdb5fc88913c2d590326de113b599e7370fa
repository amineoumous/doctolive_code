{"ast":null,"code":"import _toConsumableArray from \"C:/app/doctolive_code/patient-doctolive/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"C:/app/doctolive_code/patient-doctolive/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react'; // import Config from 'Config'\n\nimport Config from './../../EndPoint';\nimport Card from './../../components/Card/Card';\nimport CardBody from './../../components/Card/CardBody';\nimport { Col, Row, Alert, Collapse } from 'react-bootstrap';\nimport DocumentC from './../../components/Documents/DocumentsC';\nimport Messages from './../../components/Chat/messages';\nimport InfoBar from './../../components/Chat/infoBar';\nimport VideoCall from './../../components/Chat/videoChat';\nimport SendMessageForm from './../../components/Chat/sendingMessage';\nimport CountDown from './../../components/Chat/CountDown/CountDown';\nimport Button from './../../components/CustomButtons/Button';\nimport Checkbox from './../../components/Checkbox/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport { useRouter } from 'next/router';\nimport { useAuth } from './../../context/AuthContext';\nimport contentFR from './../../contentFR';\nimport contentEN from './../../contentEN';\nimport contentAR from './../../contentAR'; // export async function getServerSideProps(context) {\n//     const res = await fetch(`${Config.BACKEND_URL}/consultation/${context.params.id}`)\n//     const data = await res.json();\n//     console.log(data)\n//     if(!data){\n//         return {\n//             props: {teleconsultation: {}},\n//           }\n//     }\n//     return {\n//       props: {teleconsultation: data.consultation},\n//     }\n// }\n\nexport var __N_SSP = true;\nexport default function ConsultationContainer(_ref) {\n  var teleconsultation = _ref.teleconsultation,\n      socket = _ref.socket;\n\n  var _useState = useState(false),\n      addRapport = _useState[0],\n      setAddRapport = _useState[1];\n\n  var _useState2 = useState({}),\n      fieldValidationErrors = _useState2[0],\n      setFieldValidationErrors = _useState2[1];\n\n  var _useState3 = useState({\n    isCompleted: false\n  }),\n      state = _useState3[0],\n      setState = _useState3[1];\n\n  var _useState4 = useState({\n    sending: false,\n    success: false,\n    donneIncorecte: false\n  }),\n      response = _useState4[0],\n      setResponse = _useState4[1];\n\n  var router = useRouter();\n  var locale = router.locale;\n  var content = locale === \"ar\" ? contentAR : locale === \"en\" ? contentEN : contentFR;\n\n  var _useAuth = useAuth(),\n      userData = _useAuth.userData;\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    setResponse(function (old) {\n      return _objectSpread(_objectSpread({}, old), {}, {\n        sending: true\n      });\n    });\n    var data = state;\n    fetch(\"\".concat(Config.BACKEND_URL, \"/feedback\"), {\n      method: \"post\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': \"token \".concat(userData.token)\n      },\n      body: JSON.stringify(_objectSpread(_objectSpread({}, data), {}, {\n        consultationId: teleconsultation.id\n      }))\n    }).then(function (r) {\n      return r.json().then(function (res) {\n        if (!res.error) {\n          // props.setUserData(res);\n          setResponse({\n            sending: false,\n            success: true,\n            donneIncorecte: false\n          });\n        } else {\n          setResponse({\n            sending: false,\n            success: false,\n            donneIncorecte: true\n          });\n\n          if (res.validator) {} else {}\n        }\n      });\n    })[\"catch\"](function (error) {\n      console.log(error);\n      setResponse({\n        sending: false,\n        success: false,\n        donneIncorecte: true\n      });\n    });\n  };\n\n  var validateField = function validateField() {};\n\n  var handleChange = function handleChange(_ref2) {\n    var _ref2$target = _ref2.target,\n        value = _ref2$target.value,\n        name = _ref2$target.name;\n\n    if (name === \"isCompleted\") {\n      setState(function (old) {\n        return _objectSpread(_objectSpread({}, old), {}, {\n          isCompleted: !state.isCompleted\n        });\n      });\n    } else {\n      setState(function (old) {\n        return _objectSpread(_objectSpread({}, old), {}, _defineProperty({}, name, value));\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"teleconsultation\",\n    children: /*#__PURE__*/_jsxs(Row, {\n      className: \"m-0\",\n      children: [/*#__PURE__*/_jsx(Col, {\n        lg: \"6\",\n        md: 12,\n        sm: 12,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(ChatContainer, {\n          teleconsultation: teleconsultation,\n          socket: socket\n        })\n      }), /*#__PURE__*/_jsxs(Col, {\n        lg: \"6\",\n        md: 12,\n        sm: 12,\n        xs: 12,\n        children: [/*#__PURE__*/_jsx(Card, {\n          children: /*#__PURE__*/_jsx(CardBody, {\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              children: [/*#__PURE__*/_jsx(\"strong\", {\n                children: \" Document \\xE0 partager dans cette consultation \"\n              }), /*#__PURE__*/_jsx(DocumentC, {\n                documents: teleconsultation ? teleconsultation.documents : [],\n                socket: socket,\n                consultation: teleconsultation\n              })]\n            })\n          })\n        }), /*#__PURE__*/_jsx(Card, {\n          children: /*#__PURE__*/_jsx(CardBody, {\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              children: [/*#__PURE__*/_jsx(\"strong\", {\n                children: \" Ajouter un rapport  \"\n              }), addRapport ? /*#__PURE__*/_jsx(\"div\", {\n                children: /*#__PURE__*/_jsxs(\"form\", {\n                  onSubmit: handleSubmit,\n                  autoComplete: \"off\",\n                  children: [/*#__PURE__*/_jsxs(Row, {\n                    children: [/*#__PURE__*/_jsx(Col, {\n                      xs: \"12\",\n                      md: \"6\",\n                      className: \"mt-3\",\n                      children: /*#__PURE__*/_jsx(TextField, {\n                        error: fieldValidationErrors.nomError,\n                        placeholder: \"\",\n                        label: content.report.labelNom,\n                        required: false,\n                        variant: \"outlined\",\n                        name: \"type\",\n                        onBlur: validateField,\n                        value: state.nom,\n                        onChange: handleChange\n                      })\n                    }), /*#__PURE__*/_jsx(Col, {\n                      xs: \"12\",\n                      md: \"12\",\n                      className: \"mt-3\",\n                      children: /*#__PURE__*/_jsx(TextField, {\n                        placeholder: \"\",\n                        variant: \"outlined\",\n                        required: false,\n                        error: fieldValidationErrors.prenomError,\n                        label: content.report.labelPrenom,\n                        onBlur: validateField,\n                        name: \"description\",\n                        fullWidth: true,\n                        value: state.description,\n                        onChange: handleChange\n                      })\n                    }), /*#__PURE__*/_jsx(Col, {\n                      xs: \"12\",\n                      md: \"6\",\n                      className: \"mt-3\",\n                      children: /*#__PURE__*/_jsx(Checkbox, {\n                        placeholder: \"\",\n                        variant: \"outlined\",\n                        required: false,\n                        error: fieldValidationErrors.prenomError,\n                        label: content.report.labelEnd,\n                        name: \"isCompleted\",\n                        checked: state.isCompleted,\n                        rtl: locale === \"ar\" ? true : false,\n                        onChange: handleChange\n                      })\n                    })]\n                  }), /*#__PURE__*/_jsx(Row, {\n                    className: \"justify-content-center\",\n                    children: /*#__PURE__*/_jsx(Collapse, {\n                      \"in\": response.donneIncorecte,\n                      children: /*#__PURE__*/_jsx(\"div\", {\n                        className: \"mt-5\",\n                        children: /*#__PURE__*/_jsx(Alert, {\n                          variant: \"danger\",\n                          children: content.report.errorSignup\n                        })\n                      })\n                    })\n                  }), /*#__PURE__*/_jsx(Row, {\n                    className: \"justify-content-center\",\n                    children: /*#__PURE__*/_jsx(Collapse, {\n                      \"in\": response.success,\n                      children: /*#__PURE__*/_jsx(\"div\", {\n                        className: \"mt-5\",\n                        children: /*#__PURE__*/_jsx(Alert, {\n                          variant: \"success\",\n                          children: content.report.successSignup\n                        })\n                      })\n                    })\n                  }), /*#__PURE__*/_jsx(Row, {\n                    className: \"align-items-center justify-content-around mt-4 \",\n                    children: /*#__PURE__*/_jsxs(Button, {\n                      type: \"submit\",\n                      color: \"primary\",\n                      children: [\" \", content.report.signup, \" \"]\n                    })\n                  })]\n                })\n              }) : /*#__PURE__*/_jsx(\"div\", {\n                children: /*#__PURE__*/_jsx(Button, {\n                  color: \"primary\",\n                  onClick: function onClick() {\n                    return setAddRapport(true);\n                  },\n                  children: \" Ajouter rapport \"\n                })\n              })]\n            })\n          })\n        })]\n      })]\n    })\n  });\n}\n\nfunction ChatContainer(props) {\n  var _useState5 = useState(false),\n      onConsuting = _useState5[0],\n      setonConsuting = _useState5[1];\n\n  var _useState6 = useState(false),\n      onCalling = _useState6[0],\n      setonCalling = _useState6[1];\n\n  var _useState7 = useState(0),\n      difference = _useState7[0],\n      setdifference = _useState7[1];\n\n  var _useState8 = useState(0),\n      now = _useState8[0],\n      setnow = _useState8[1];\n\n  useEffect(function () {\n    if (props.socket) {\n      props.socket.on(\"call-entring\", function () {\n        setonCalling(true);\n      });\n      props.socket.emit('check-time', {\n        consultationId: props.teleconsultation.id\n      }, function (response) {\n        setdifference(response.diff);\n        setnow(response.now);\n        setonConsuting(response.isTime);\n      });\n    }\n  }, [props.socket]);\n  return /*#__PURE__*/_jsx(\"div\", {\n    children: props.teleconsultation ? /*#__PURE__*/_jsx(Row, {\n      className: \"justify-content-around m-0\",\n      children: /*#__PURE__*/_jsxs(Col, {\n        lg: \"12\",\n        className: \"bg-white p-0 discussion-container\",\n        children: [/*#__PURE__*/_jsx(Row, {\n          className: \"m-0\",\n          children: /*#__PURE__*/_jsx(InfoBar, {\n            onConsuting: onConsuting,\n            medecin: props.teleconsultation.medecin,\n            teleconsultation: props.teleconsultation\n          })\n        }), /*#__PURE__*/_jsx(Row, {\n          className: \"discussion m-0\",\n          children: /*#__PURE__*/_jsx(ProcessZone, _objectSpread({\n            onConsuting: onConsuting,\n            medecin: props.teleconsultation.medecin,\n            difference: difference,\n            now: now,\n            setonCalling: setonCalling,\n            onCalling: onCalling\n          }, props))\n        })]\n      })\n    }) : null\n  });\n}\n\nfunction ProcessZone(props) {\n  useEffect(function () {\n    if (navigator) {\n      if (navigator.permissions) {\n        navigator.permissions.query({\n          name: \"camera\"\n        }).then(function (res) {\n          return console.log(res);\n        }, function (e) {\n          return console.log(e.name + \": \" + e.message);\n        })[\"catch\"](function (err) {\n          console.log(e.name + \": \" + e.message);\n        });\n        navigator.permissions.query({\n          name: \"microphone\"\n        }).then(function (_ref3) {\n          var state = _ref3.state;\n          return console.log(state);\n        }, function (e) {\n          return console.log(e.name + \": \" + e.message);\n        }); // navigator.mediaDevices.enumerateDevices()\n        // .then(devices => {\n        //     const filtered = devices.filter(device => device.kind === 'videoinput');\n        //     // console.log('Cameras found', filtered)\n        //     // callback(filtered);\n        // })\n        // .catch(err=> {\n        //     console.log(`Unable to fetsh stream ${err}`)\n        // })\n      }\n    }\n\n    return function () {};\n  }, []);\n\n  if (props.onCalling) {\n    return /*#__PURE__*/_jsx(VideoCall, _objectSpread({}, props));\n  }\n\n  if (props.onConsuting) {\n    return /*#__PURE__*/_jsx(Chat, _objectSpread({}, props));\n  }\n\n  switch (true) {\n    case props.difference > 0:\n      return /*#__PURE__*/_jsx(FutureConsultation, {\n        difference: props.difference,\n        now: props.now\n      });\n\n    case props.difference < 0:\n      return /*#__PURE__*/_jsx(OldConsultation, {});\n\n    default:\n      return /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(\"p\", {\n          children: \" Nous avons pas pus d\\xE9duire le cr\\xE9neau de cette consultation. Veillez rafr\\xE9chir la page pour r\\xE9ssayer \"\n        })\n      });\n  }\n}\n\nfunction Chat(props) {\n  var _useState9 = useState([]),\n      messages = _useState9[0],\n      setMessages = _useState9[1];\n\n  var _useState10 = useState(\"\"),\n      message = _useState10[0],\n      setMessage = _useState10[1];\n\n  var sendMessage = function sendMessage(event) {\n    event.preventDefault();\n\n    if (message) {\n      setMessage('');\n      var data = {\n        message: message,\n        type: \"text\",\n        sentBy: \"patient\",\n        sentTo: \"medecin\",\n        selectedUser: \"m\" + props.medecin.id,\n        consultationId: props.teleconsultation.id\n      };\n      setMessages(function (messages) {\n        return [].concat(_toConsumableArray(messages), [{\n          isSentByCurrentUser: true,\n          data: data\n        }]);\n      });\n      props.socket.emit('sendMessage', data, function () {});\n    }\n  };\n\n  useEffect(function () {\n    if (props.socket) {\n      props.socket.on('message', function (message) {\n        setMessages(function (messages) {\n          return [].concat(_toConsumableArray(messages), [message]);\n        });\n      });\n    }\n\n    return function () {\n      if (props.socket) {\n        props.socket.removeAllListeners('message');\n      }\n    };\n  }, [props.socket]);\n  return /*#__PURE__*/_jsxs(Col, {\n    lg: \"12\",\n    md: \"12\",\n    sm: \"12\",\n    xs: \"12\",\n    className: \"chat-messages p-0\",\n    children: [/*#__PURE__*/_jsx(Messages, {\n      messages: messages,\n      user: props.medecin,\n      storedMessages: props.teleconsultation.messages\n    }), /*#__PURE__*/_jsx(SendMessageForm, {\n      message: message,\n      setMessage: setMessage,\n      sendMessage: sendMessage,\n      active: props.teleconsultation.active\n    })]\n  });\n}\n\nfunction FutureConsultation(_ref4) {\n  var difference = _ref4.difference,\n      now = _ref4.now;\n  return /*#__PURE__*/_jsx(Col, {\n    lg: \"12\",\n    md: \"12\",\n    sm: \"12\",\n    xs: \"12\",\n    className: \"chat-messages p-5\",\n    children: /*#__PURE__*/_jsx(Row, {\n      className: \"justify-content-center align-items-center h-100\",\n      children: /*#__PURE__*/_jsx(CountDown, {\n        difference: difference,\n        now: now\n      })\n    })\n  });\n}\n\nfunction OldConsultation(props) {\n  return /*#__PURE__*/_jsx(Col, {\n    lg: \"12\",\n    md: \"12\",\n    sm: \"12\",\n    xs: \"12\",\n    className: \"chat-messages p-0\",\n    children: /*#__PURE__*/_jsx(Row, {\n      className: \"justify-content-center align-items-center h-100\",\n      children: /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(\"h2\", {\n          children: \" consultation passer \"\n        })\n      })\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}