{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Component } from 'react';\nimport Peer from 'simple-peer';\nimport autoBind from 'react-autobind'; // import Axios from 'axios'\n// import baseUrl from './../../config'\n\nimport { CircularProgress } from '@material-ui/core';\nimport { Button, Row, Col, Collapse, Alert } from 'react-bootstrap';\nimport { FaPhoneSlash, FaPhone, FaCheck } from 'react-icons/fa'; // import callerTone from './../../assets/media/callertone.mp3'\n// import LogoPng from './../../assets/img/pelia_logo.png'\n\nexport default class ElemenetsCall extends Component {\n  constructor(props) {\n    super(props);\n    autoBind(this);\n    this.state = {\n      stream: null,\n      respondingProcess: true,\n      errorMedia: {\n        error: false\n      }\n    };\n  }\n\n  componentDidMount() {\n    const constraints = {\n      video: {\n        facingMode: \"user\",\n        width: 640,\n        height: 480,\n        cursor: \"motion\"\n      },\n      audio: true\n    };\n    this.initiatorCallVideo(constraints).then(stream => {\n      window.streamReference = stream;\n      this.props.socket.emit('patient-ready', {\n        selectedUser: 'm' + this.props.medecin.id\n      }, () => {}); // let videoStream = new MediaStream(stream.getVideoTracks(), options);\n\n      try {\n        this.myVideo.srcObject = stream;\n      } catch (e) {\n        this.myVideo.src = URL.createObjectURL(stream);\n      }\n\n      this.myVideo.play(); // try {\n      //     this.callerTone.src = callerTone\n      // } catch (e) {\n      //     this.callerTone.srcObject =  URL.createObjectURL(callerTone) \n      // }\n      // this.callerTone.play();\n\n      this.setState({\n        stream: stream,\n        respondingProcess: false\n      });\n    }).catch(err => {\n      this.cameraAuthDenied();\n      console.log(`Unable to fetsh stream ${err}`);\n    });\n    this.setupSocket();\n  }\n\n  componentWillUnmount() {\n    this.props.socket.removeAllListeners('patient-signal-call');\n    this.props.socket.removeAllListeners('patient-call');\n    this.props.socket.removeAllListeners('reject-call-patient');\n\n    if (this.state.peer) {\n      this.state.peer.destroy();\n    }\n  }\n\n  setupSocket() {\n    let socket = this.props.socket;\n    socket.on('patient-call', response => {});\n    socket.on('reject-call-patient', response => {\n      this.stopStream();\n      this.setState({\n        respondingProcess: false,\n        passingCall: false,\n        responding: false\n      });\n      this.props.setonCalling(false);\n    });\n    socket.on('patient-signal-call', ({\n      data\n    }) => {\n      this.setState({\n        responding: true\n      });\n      this.state.peer.signal(data);\n    });\n  }\n\n  cameraAuthDenied(reason) {\n    this.setState({\n      errorMedia: {\n        error: true,\n        reason\n      }\n    });\n  }\n\n  initiatorCallVideo(constraints) {\n    return new Promise((resolve, reject) => {\n      navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n        resolve(stream);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  stopStream() {\n    if (this.callerTone !== null) {\n      this.callerTone.muted = true;\n      this.callerTone = null;\n    }\n\n    if (!window.streamReference) return;\n    window.streamReference.getAudioTracks().forEach(track => {\n      track.stop();\n    });\n    window.streamReference.getVideoTracks().forEach(track => {\n      track.stop();\n    });\n    window.streamReference = null;\n  }\n\n  confirmCall() {\n    const peer = new Peer({\n      initiator: true,\n      stream: this.state.stream,\n      config: {\n        iceServers: [{\n          urls: \"stun:pelia.ma:3478\"\n        }, {\n          urls: \"turn:pelia.ma:3478\",\n          username: \"peliaturn\",\n          credential: \"ejfLUNE6C=fM&4P!\"\n        }]\n      },\n      trickle: false\n    });\n    peer.on('signal', data => {\n      this.props.socket.emit('confirm-call', {\n        selectedUser: 'm' + this.props.medecin.id,\n        data\n      }, () => {});\n    });\n    peer.on('stream', stream => {\n      this.callerTone.pause();\n\n      try {\n        this.userVideo.srcObject = stream;\n      } catch (e) {\n        this.userVideo.src = URL.createObjectURL(stream);\n      }\n\n      this.userVideo.play();\n      this.setState({\n        passingCall: true,\n        respondingProcess: false,\n        timeAppel: Date.now()\n      });\n    });\n    peer.on('close', () => {\n      this.stopStream();\n      this.setState({\n        respondingProcess: false,\n        passingCall: false,\n        responding: false\n      }); // this.props.setonCalling(false)\n\n      if (this.state.peer) {\n        this.state.peer.destroy();\n      }\n    });\n    peer.on('error', err => {\n      console.log(`vous avez perdue la connextion avec votre patient ${err}`);\n    });\n    this.setState({\n      respondingProcess: true,\n      peer\n    });\n  }\n\n  rejectCall() {\n    this.stopStream();\n    this.setState({\n      respondingProcess: false,\n      passingCall: false,\n      responding: false\n    });\n    this.props.socket.emit('patient-reject-call', {\n      selectedUser: 'm' + this.props.medecin.id\n    });\n    this.props.setonCalling(false);\n  }\n\n  render() {\n    let {\n      responding,\n      passingCall,\n      respondingProcess\n    } = this.state;\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: \"video patient\",\n      children: [/*#__PURE__*/_jsx(\"audio\", {\n        ref: ref => this.callerTone = ref,\n        playsInline: true,\n        loop: true\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: responding ? \"repondre video-container\" : \"video-container\",\n        children: [/*#__PURE__*/_jsx(\"video\", {\n          id: \"peerVid\",\n          ref: ref => {\n            this.userVideo = ref;\n          },\n          playsInline: true,\n          autoPlay: true\n        }), /*#__PURE__*/_jsx(Row, {\n          className: \"justify-content-center m-0\",\n          children: /*#__PURE__*/_jsx(\"video\", {\n            id: \"myVid\",\n            muted: true,\n            ref: ref => {\n              this.myVideo = ref;\n            },\n            playsInline: true,\n            autoPlay: true\n          })\n        }), /*#__PURE__*/_jsx(Row, {\n          className: !passingCall ? \"responding process m-0\" : \"responding m-0\",\n          children: /*#__PURE__*/_jsxs(Col, {\n            className: \"p-0\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"layer\"\n            }), /*#__PURE__*/_jsx(Row, {\n              className: \"mt-5\",\n              children: /*#__PURE__*/_jsx(Collapse, {\n                in: this.state.errorMedia.error,\n                children: /*#__PURE__*/_jsx(\"div\", {\n                  id: \"example-collapse-text\",\n                  style: {\n                    zIndex: 999\n                  },\n                  children: /*#__PURE__*/_jsx(Alert, {\n                    variant: \"danger\",\n                    children: \"Vous ne autoris\\xE9 pas l'acc\\xE9s au camera pour le site ocp.pelia.ma. Changer vos param\\xE9tre pour pouvoir communiquer avec votre m\\xE9decin\"\n                  })\n                })\n              })\n            }), !passingCall && /*#__PURE__*/_jsx(Row, {\n              className: \"text-center d-flex justify-content-around w-100 p-4 ml-1 mt-5\",\n              children: /*#__PURE__*/_jsx(\"p\", {\n                className: \"text-center caller \",\n                style: {\n                  maxHeight: \"20%\"\n                },\n                children: \" Un appel entrant de la part de votre m\\xE9decin\"\n              })\n            }), /*#__PURE__*/_jsxs(Row, {\n              className: \"end-call\",\n              children: [/*#__PURE__*/_jsx(ButtonProcess, {\n                className: \"action\",\n                onClick: this.rejectCall,\n                type: \"button\",\n                variant: \"danger\",\n                sending: respondingProcess,\n                IconSuccess: FaCheck,\n                Icon: /*#__PURE__*/_jsx(FaPhoneSlash, {\n                  size: \"1.5rem\"\n                })\n              }), !passingCall && /*#__PURE__*/_jsx(ButtonProcess, {\n                className: \"action\",\n                onClick: this.confirmCall,\n                type: \"button\",\n                variant: \"success\",\n                sending: respondingProcess,\n                IconSuccess: FaCheck,\n                Icon: /*#__PURE__*/_jsx(FaPhone, {\n                  size: \"1.5rem\"\n                })\n              })]\n            })]\n          })\n        })]\n      })]\n    });\n  }\n\n}\n\nfunction ButtonProcess(props) {\n  return /*#__PURE__*/_jsxs(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsx(Button, {\n      onClick: props.onClick,\n      className: props.className,\n      type: props.type,\n      variant: props.variant,\n      disabled: props.sending,\n      children: props.Icon\n    }), props.sending && /*#__PURE__*/_jsx(CircularProgress, {\n      size: 24,\n      style: {\n        color: \"#8dc63f\",\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        marginTop: -12,\n        marginLeft: -12\n      }\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}