{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md';\nimport { Divider } from '@material-ui/core';\nimport Config from './../../EndPoint';\nimport { useAuth } from './../../context/AuthContext';\nexport default function CalendarAvailability(props) {\n  const {\n    0: startDate,\n    1: setStartDate\n  } = useState(moment());\n  const {\n    0: calandar,\n    1: setMedecinCalendar\n  } = useState([]);\n  const {\n    0: showall,\n    1: setShowall\n  } = useState(false);\n  const {\n    userData\n  } = useAuth();\n\n  const selectHour = (day, hour, disable) => {\n    console.log(hour);\n\n    if (disable) {//    this.setState({ error: true, expired:true, message: 'ce moment est indisponible' })\n      //    setTimeout(() => {\n      //        this.setState({expired: false})\n      //    }, 5000);\n    } else {\n      props.setSelectedHour(day.format('YYYY/MM/DD'), hour);\n    }\n  };\n\n  const changeDate = direction => {\n    if (direction === 'next') {\n      setStartDate(moment(startDate).add(7, 'days'));\n    } else {\n      if (moment(startDate).isAfter(moment())) {\n        setStartDate(moment(startDate).subtract(7, 'days')); //    this.setState({ startDate: moment(this.state.startDate).subtract(7, 'days') })\n      }\n    }\n  };\n\n  const createHoursSoir = day => {\n    var _props$medecin;\n\n    const disponibiliteDay = (_props$medecin = props.medecin) === null || _props$medecin === void 0 ? void 0 : _props$medecin.horaires.find(h => h.jour === day.format('dddd'));\n    if (!disponibiliteDay) return [];\n    let table = [];\n    let endHour = moment(disponibiliteDay.fin_soir, 'HH:mm:ss');\n    let hour = moment(disponibiliteDay.debut_soir, 'HH:mm:ss');\n    let i = 0;\n    let k = 2;\n\n    if (showall) {\n      k = 100;\n    }\n\n    while (hour.isBefore(endHour) && i < k) {\n      let element = undefined;\n\n      if (calandar) {\n        // element = calandar.find( e => moment.utc(e.date).format('HH:mm') === hour)\n        element = calandar.find(e => {\n          // return moment(e.date).isSame(day.format('YYYY-MM-DDT') + hour.format('HH:mm')+\":00.000Z\", \"minutes\")\n          return e.time === hour.format('HH:mm:ss') && day.format('YYYY-MM-DD') === e.date;\n        });\n      }\n\n      let HourInTheDay = moment(moment(day).format('YYYY/MM/DD') + hour.format('HH:mm'), 'YYYY/MM/DDHH:mm');\n      let isDisabled = element !== undefined || moment().isAfter(HourInTheDay);\n      let cloneHour = hour.format('HH:mm');\n      let hourDiv = !isDisabled ? /*#__PURE__*/_jsx(\"div\", {\n        disabled: isDisabled,\n        className: isDisabled ? \"cell hours-element disabled\" : \"cell hours-element\",\n        onClick: () => selectHour(day, cloneHour, isDisabled),\n        children: /*#__PURE__*/_jsxs(\"span\", {\n          className: \"hour\",\n          children: [\" \", hour.format('HH:mm'), \" \"]\n        })\n      }, i) : /*#__PURE__*/_jsxs(\"div\", {\n        className: \" hours-element-disabled\",\n        children: [\" \", /*#__PURE__*/_jsxs(\"div\", {\n          className: \"hour-empty\",\n          children: [/*#__PURE__*/_jsx(\"span\", {\n            children: \"-:-\"\n          }), \"   \"]\n        }), \" \"]\n      }, i);\n      table.push(hourDiv);\n      i++;\n      hour = hour.add(disponibiliteDay.duree, 'minutes');\n    }\n\n    return table;\n  };\n\n  const createHoursMatin = day => {\n    var _props$medecin2;\n\n    const disponibiliteDay = (_props$medecin2 = props.medecin) === null || _props$medecin2 === void 0 ? void 0 : _props$medecin2.horaires.find(h => h.jour === day.lang(\"fr\").format('dddd'));\n    if (!disponibiliteDay) return [];\n    let table = [];\n    let endHour = moment(disponibiliteDay.fin_matin, 'HH:mm:ss');\n    let hour = moment(disponibiliteDay.debut_matin, 'HH:mm:ss');\n    let i = 0;\n    let k = 2;\n\n    if (showall) {\n      k = 100;\n    }\n\n    while (hour.isBefore(endHour) && i < k) {\n      let element = undefined;\n\n      if (calandar) {\n        element = calandar.find(e => {\n          return e.time === hour.format('HH:mm:ss') && day.format('YYYY-MM-DD') === e.date;\n        });\n      }\n\n      let HourInTheDay = moment(moment(day).format('YYYY/MM/DD') + hour, 'YYYY/MM/DDHH:mm');\n      let cloneHour = hour.format('HH:mm');\n      let isDisabled = element !== undefined || moment().isAfter(HourInTheDay);\n      let hourDiv = !isDisabled ? /*#__PURE__*/_jsx(\"div\", {\n        disabled: isDisabled,\n        className: isDisabled ? \"cell hours-element disabled\" : \"cell hours-element\",\n        onClick: () => selectHour(day, cloneHour, isDisabled),\n        children: /*#__PURE__*/_jsxs(\"span\", {\n          className: \"hour\",\n          children: [hour.format('HH:mm'), \"  \"]\n        })\n      }, i) : /*#__PURE__*/_jsxs(\"div\", {\n        className: \" hours-element-disabled\",\n        children: [\" \", /*#__PURE__*/_jsx(\"div\", {\n          className: \"hour-empty\",\n          children: /*#__PURE__*/_jsx(\"span\", {\n            children: \"-:-\"\n          })\n        }), \" \"]\n      }, i);\n      table.push(hourDiv);\n      i++;\n      hour = hour.add(disponibiliteDay.duree, 'minutes');\n    }\n\n    return table;\n  };\n\n  useEffect(async () => {\n    var _props$medecin3;\n\n    const res = await fetch(`${Config.BACKEND_URL}/consultation/medecin-calendar/${(_props$medecin3 = props.medecin) === null || _props$medecin3 === void 0 ? void 0 : _props$medecin3.id}/${startDate}`, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `token ${userData.token}`\n      }\n    });\n    const data = await res.json();\n    setMedecinCalendar(data.medecinCalendar);\n  }, [startDate]);\n\n  const createCalendar = () => {\n    let table = [];\n\n    for (let i = 0; i <= 6; i++) {\n      let date = moment(startDate).add(i, 'days');\n\n      let dayAvailability = /*#__PURE__*/_jsxs(\"div\", {\n        className: \"calendar-day\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"calendar-day-title\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"cell-content\",\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              className: \"calendar-day-name\",\n              children: [date.format('dddd'), \" \"]\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"calendar-day-date\",\n              children: date.format('D') + \" \" + date.format(\"MMM\")\n            })]\n          })\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          children: [createHoursMatin(date), /*#__PURE__*/_jsx(Divider, {}), createHoursSoir(date)]\n        })]\n      }, i);\n\n      table.push(dayAvailability);\n    }\n\n    return table;\n  };\n\n  return /*#__PURE__*/_jsxs(\"section\", {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: \"date-range-calendar\",\n      style: props.locale === \"ar\" ? {\n        direction: \"rtl\",\n        textAlign: \"right\"\n      } : {\n        direction: \"ltr\"\n      },\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: \"range-calendar\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"calendar-pagination\",\n          children: /*#__PURE__*/_jsxs(\"button\", {\n            className: \"\",\n            id: \"date-range-preview\",\n            onClick: () => changeDate('preview'),\n            children: [\"  \", props.locale === \"ar\" ? /*#__PURE__*/_jsx(MdChevronRight, {\n              color: \"#1AB9B9\"\n            }) : /*#__PURE__*/_jsx(MdChevronLeft, {\n              color: \"#1AB9B9\"\n            }), \"  \"]\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"calendar\",\n          children: props.medecin ? createCalendar() : null\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"calendar-pagination\",\n          children: /*#__PURE__*/_jsxs(\"button\", {\n            className: \"\",\n            id: \"date-range-next\",\n            onClick: () => changeDate('next'),\n            children: [\"  \", props.locale === \"ar\" ? /*#__PURE__*/_jsx(MdChevronLeft, {\n              color: \"#1AB9B9\"\n            }) : /*#__PURE__*/_jsx(MdChevronRight, {\n              color: \"#1AB9B9\"\n            }), \" \"]\n          })\n        })]\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: \"text-center w-100 divider-t\",\n      children: /*#__PURE__*/_jsx(\"a\", {\n        href: \"javascript:void(0)\",\n        className: \"show-all\",\n        onClick: () => setShowall(!showall),\n        children: \"VOIRE PLUS D\\u2019HORAIRES\"\n      })\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}