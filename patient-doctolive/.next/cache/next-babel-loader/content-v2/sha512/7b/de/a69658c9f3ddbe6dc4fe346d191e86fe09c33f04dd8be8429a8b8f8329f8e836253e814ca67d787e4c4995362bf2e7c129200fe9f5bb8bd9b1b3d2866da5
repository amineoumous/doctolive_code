{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"C:/Users/CARRE/Documents/GitHub/doctolive_code/patient-doctolive/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"C:/Users/CARRE/Documents/GitHub/doctolive_code/patient-doctolive/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"C:/Users/CARRE/Documents/GitHub/doctolive_code/patient-doctolive/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:/Users/CARRE/Documents/GitHub/doctolive_code/patient-doctolive/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Col } from 'react-bootstrap'; // @material-ui/icons\n\nimport Link from 'next/link';\nimport { BsSearch } from \"react-icons/bs\";\nimport { MdLocationOn } from \"react-icons/md\";\nimport { BiCurrentLocation } from \"react-icons/bi\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport fetch from 'unfetch';\nimport Config from './../../EndPoint';\nimport { useRouter } from 'next/router';\n\nvar style = function style(theme) {\n  var _searchButton;\n\n  return {\n    endAdornment: {\n      display: \"none\",\n      \"& .MuiAutocomplete-endAdornment\": {\n        display: \"none\"\n      }\n    },\n    searchContainer: {\n      paddingTop: \"120px\"\n    },\n    searchContent: {\n      zIndex: 5\n    },\n    searchBar: _defineProperty({\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    }, theme.breakpoints.down(\"sm\"), {\n      justifyContent: 'center'\n    }),\n    searchBarQuery: _defineProperty({\n      \"-ms-flex\": \"0 0 240px\",\n      flex: \"0 0 240px\",\n      marginRight: \"12px\",\n      position: \"relative\",\n      marginBottom: 12,\n      width: \"240px\"\n    }, theme.breakpoints.down(\"sm\"), {\n      flex: \"0 0 100%\",\n      width: \"100%\"\n    }),\n    searchInputWrapper: {\n      borderRadius: \"8px\",\n      background: \"#fff\",\n      position: \"relative\",\n      display: \"flex\",\n      width: \"100%\",\n      height: 60,\n      '& .searchbar-input-icon': {\n        position: \"absolute\",\n        top: 18,\n        left: 16,\n        width: 24,\n        height: 24,\n        pointerEvents: \"none\",\n        fill: \"#7791a2\"\n      },\n      '& .searchbar-input-icon-ar': {\n        position: \"absolute\",\n        top: 18,\n        right: 16,\n        width: 24,\n        height: 24,\n        pointerEvents: \"none\",\n        fill: \"#7791a2\"\n      }\n    },\n    searchbarPlace: _defineProperty({\n      \"-ms-flex\": \" 0 0 490px\",\n      flex: \" 0 0 490px\",\n      marginRight: \"12px\",\n      position: \"relative\",\n      width: \"490px\"\n    }, theme.breakpoints.down(\"sm\"), {\n      flex: \"0 0 100%\",\n      width: \"100%\",\n      marginBottom: 12\n    }),\n    searchButton: (_searchButton = {\n      cursor: \"pointer\",\n      position: \"absolute\",\n      width: \"45px\",\n      right: 0,\n      transform: \"translateX(100%) translateX(-51px)\",\n      color: \"#435f71\",\n      transition: \"-webkit-transform 400ms\"\n    }, _defineProperty(_searchButton, \"transition\", \" transform 400ms\"), _defineProperty(_searchButton, \"transition\", \"transform 400ms, -webkit-transform 400ms\"), _defineProperty(_searchButton, \"transitionSelay\", \"100ms\"), _defineProperty(_searchButton, \"height\", \"100%\"), _defineProperty(_searchButton, \"textAlign\", \"left\"), _defineProperty(_searchButton, \"backgroundColor\", \"white\"), _defineProperty(_searchButton, \"border\", 0), _defineProperty(_searchButton, \"outline\", \"none\"), _defineProperty(_searchButton, \"boxShadow\", \"none\"), _defineProperty(_searchButton, \"appearance\", \"none !important\"), _defineProperty(_searchButton, \"textDecoration\", \"none !important\"), _defineProperty(_searchButton, \"margin\", 0), _defineProperty(_searchButton, \"display\", \"inline-block\"), _defineProperty(_searchButton, \"padding\", \"0 16px\"), _searchButton),\n    searchSubmitButton: _defineProperty({\n      borderRadius: \" 8px\",\n      outline: \"none\",\n      boxShadow: \"none\",\n      marginRight: 12,\n      width: \"46px\",\n      \"-ms-flex\": \"0 0 46px\",\n      flex: \"0 0 46px\",\n      height: \"60px\"\n    }, theme.breakpoints.down(\"md\"), {\n      width: \"100%\",\n      marginBottom: 12\n    })\n  };\n};\n\nvar useStyles = makeStyles(style);\nexport default function SearchInput(_ref) {\n  var content = _ref.content,\n      locale = _ref.locale;\n  var classes = useStyles();\n  var router = useRouter();\n\n  var _useState = useState({}),\n      medecin = _useState[0],\n      setMedecin = _useState[1];\n\n  var _useState2 = useState({}),\n      ville = _useState2[0],\n      setVille = _useState2[1];\n\n  var _useState3 = useState(false),\n      loadingMedecin = _useState3[0],\n      setLoadingMedecin = _useState3[1];\n\n  var _useState4 = useState(false),\n      isSearched = _useState4[0],\n      setIsSerached = _useState4[1];\n\n  var _useState5 = useState(false),\n      LoadingCities = _useState5[0],\n      setLoadingCities = _useState5[1];\n\n  var _useState6 = useState(\"\"),\n      inputValue = _useState6[0],\n      setInputValue = _useState6[1];\n\n  var _useState7 = useState([]),\n      searchFetched = _useState7[0],\n      setSearchFetched = _useState7[1];\n\n  var _useState8 = useState([]),\n      cities = _useState8[0],\n      setCities = _useState8[1];\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch(\"\".concat(Config.BACKEND_URL, \"/medecin/search/specialite/\").concat(inputValue), {\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              }\n            });\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n\n          case 6:\n            data = _context.sent;\n\n            if (data.speciality) {\n              setSearchFetched([].concat(_toConsumableArray(data.speciality), _toConsumableArray(data.medecins)));\n            }\n\n            _context.next = 12;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n\n          case 12:\n            return _context.abrupt(\"return\", function () {});\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 10]]);\n  })), [inputValue]);\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var res, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return fetch(\"\".concat(Config.BACKEND_URL, \"/city\"), {\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              }\n            });\n\n          case 3:\n            res = _context2.sent;\n            _context2.next = 6;\n            return res.json();\n\n          case 6:\n            data = _context2.sent;\n            setCities(data.cities);\n            _context2.next = 12;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n\n          case 12:\n            return _context2.abrupt(\"return\", function () {});\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 10]]);\n  })), []);\n\n  var submiting = function submiting(e) {\n    e.preventDefault();\n    var Medecin_rechercher = medecin ? medecin.name ? medecin.name : medecin.nom : medecin;\n    var ville_rechercher = ville ? ville.name : ville;\n\n    if (!Medecin_rechercher) {\n      Medecin_rechercher = \"generaliste\";\n    } else {\n      if (Medecin_rechercher.trim() === \"\") {\n        Medecin_rechercher = \"medecin-generaliste\";\n      }\n    }\n\n    if (!ville_rechercher) {\n      ville_rechercher = \"maroc\";\n    } else {\n      if (ville_rechercher.trim() === \"\") {\n        // setVille({name: \"maroc\"})\n        ville_rechercher = \"maroc\";\n      }\n    }\n\n    return router.push({\n      pathname: \"/recherche/\".concat(Medecin_rechercher, \"/\").concat(ville_rechercher)\n    });\n  };\n\n  var selectPosition = function selectPosition() {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      console.log(position);\n    });\n  };\n\n  var handleSearchSpecialite = function handleSearchSpecialite(e, newInputValue) {\n    setMedecin(newInputValue);\n  };\n\n  var handleSearchSpecialitea = function handleSearchSpecialitea(e, newInputValue) {\n    if (newInputValue.length > 0) {\n      setInputValue(newInputValue);\n    } else {}\n  };\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: classes.searchContent,\n    children: /*#__PURE__*/_jsx(Col, {\n      lg: \"12\",\n      md: \"12\",\n      children: /*#__PURE__*/_jsxs(\"form\", {\n        className: classes.searchBar,\n        onSubmit: submiting,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: classes.searchBarQuery,\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: classes.searchInputWrapper + \" search\",\n            children: [/*#__PURE__*/_jsx(BsSearch, {\n              className: locale === \"ar\" ? \"searchbar-input-icon-ar\" : \"searchbar-input-icon\"\n            }), /*#__PURE__*/_jsx(Autocomplete, {\n              onInputChange: handleSearchSpecialitea,\n              loading: loadingMedecin,\n              noOptionsText: isSearched ? content.noOption : content.noOption2,\n              groupBy: function groupBy(option) {\n                return option.name ? \"specialite\" : \"medecin\";\n              },\n              id: \"suggestion-medecin\",\n              loadingText: content.loading,\n              options: searchFetched,\n              debug: true,\n              getOptionLabel: function getOptionLabel(option) {\n                return option.nom ? option.nom + \" \" + option.prenom + \" \" + option.email + \" \" + option.phone : option.name ? option.name : \"\";\n              },\n              renderOption: function renderOption(option) {\n                return option.nom ? /*#__PURE__*/_jsx(React.Fragment, {\n                  children: /*#__PURE__*/_jsx(Link, {\n                    href: \"/doctor/\".concat(option.id),\n                    children: /*#__PURE__*/_jsxs(\"a\", {\n                      className: \"d-flex w-100\",\n                      children: [option.image ? /*#__PURE__*/_jsx(\"span\", {\n                        className: \"searchbar-result-profile-avatar \",\n                        children: /*#__PURE__*/_jsx(\"img\", {\n                          className: \"img-fluid\",\n                          src: \"\".concat(Config.BACKEND_URL, \"/\").concat(option.image)\n                        })\n                      }) : null, /*#__PURE__*/_jsxs(\"span\", {\n                        children: [\" Dr. \", option.nom, \" \", option.prenom, \" \"]\n                      })]\n                    })\n                  })\n                }) : /*#__PURE__*/_jsx(React.Fragment, {\n                  children: option.name\n                });\n              },\n              onChange: function onChange(e, newInputValue) {\n                return handleSearchSpecialite(e, newInputValue);\n              },\n              value: medecin,\n              style: {\n                width: \"100%\",\n                height: \"60px\"\n              },\n              renderInput: function renderInput(params) {\n                return /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({}, params), {}, {\n                  placeholder: content.recherchelabel\n                }));\n              }\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: classes.searchbarPlace,\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: classes.searchInputWrapper + \" search\",\n            style: {\n              overflow: \"hidden\"\n            },\n            children: [/*#__PURE__*/_jsx(MdLocationOn, {\n              className: locale === \"ar\" ? \"searchbar-input-icon-ar\" : \"searchbar-input-icon\"\n            }), /*#__PURE__*/_jsx(Autocomplete, {\n              id: \"suggestion-villes\",\n              options: cities,\n              loading: LoadingCities,\n              loadingText: content.cityLoading,\n              getOptionLabel: function getOptionLabel(option) {\n                return option.name ? option.name : \"\";\n              },\n              onChange: function onChange(e, newInputValue) {\n                return setVille(newInputValue);\n              },\n              value: ville,\n              style: {\n                width: \"100%\",\n                height: \"60px\"\n              },\n              renderInput: function renderInput(params) {\n                return /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({}, params), {}, {\n                  placeholder: content.citylabel\n                }));\n              }\n            }), /*#__PURE__*/_jsx(\"button\", {\n              onClick: selectPosition,\n              className: classes.searchButton,\n              type: \"button\",\n              children: /*#__PURE__*/_jsx(\"span\", {\n                children: /*#__PURE__*/_jsx(BiCurrentLocation, {\n                  className: locale === \"ar\" ? \"searchbar-input-icon-ar\" : \"searchbar-input-icon\"\n                })\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"button\", {\n          className: classes.searchSubmitButton + \" btn btn-submit\",\n          role: \"button\",\n          type: \"submit\",\n          children: /*#__PURE__*/_jsxs(\"span\", {\n            children: [\" \", /*#__PURE__*/_jsx(BsSearch, {\n              className: locale === \"ar\" ? \"searchbar-input-icon-ar\" : \"searchbar-input-icon\"\n            })]\n          })\n        })]\n      })\n    })\n  });\n} // SearchInput.getInitialProps = async (ctx) => {\n//     const res = await fetch(`${Config.BACKEND_URL}/city`);\n//     console.log(res)\n//     if(res.status === 404) return { villes: [] }\n//     const json = await res.json()\n//     return { villes:json.cities }\n//   }","map":null,"metadata":{},"sourceType":"module"}